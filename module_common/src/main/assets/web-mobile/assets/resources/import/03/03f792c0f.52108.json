[1,["ecpdLyjvZBwrvm+cedCcQy","bdEOxB/YhLGY/QOK+RnkkF","6dkeWRTOBGXICfYQ7JUBnG","08Yu22GrpKNKUG28nYWUqg","541HcJeOZKpasrLDMNA2c/","791v3+ZW5EY4lwV1K33Yhp","abwstieFJFJakN1HRIe4jy","4dF7oAqNFGtKM7KlfOMS8u","57meIhobhKzZwyE9MHYqTH","a7mlkFgZtKWavrg11NPBQE","63pRelhvBGY4SCq1atrTAq","d1G0QqZEhMyL6bFQ7jNJLk","53T+C2xOBJQaD8eGTMgOsl","6cu0m9x2hDJ6y+qDCVVRo2","7e8x++gwtDVKLIASm7WhRn","c5x9qGISFDIoGqfaLZbu8h","8ajDOU9WdOGbu2UsrSNnRg","19xdt+U65P+744Bb0odWdV","adP4YJq+pKqazwBX9I2GA+","6fpEWxxrVG6pQxEyDWCWUT","2am7V8OUJCCIrQA+RMl6Yx","27NUTA5MRD0bdtuzjabDqE","1cTURxbDBK2pbRIVcIKNmI","ebw/ySA19DD4TcztaLQM7b","adTTcnUm9Bro5dqCw9xGye","54me80U/tH+7bQOUYFPgXH","4b5e6+GWRPpp96tyIAEzI3","b79O8SipZAsLxDvsiblV57","7fLmTnht9Loq7bB2v6UkZ2","65Rbe9D7FG/oPBm4JYgxj8","2ex/GfDQVGWom755tbS0EU","f0d15aWyJHCqDrIt9M8DyI","914SHClc5KK7P+28PDdcgn","5e2yrpdNhHxaV4LUUWK0Nx","06Klb3KSpIzZ4ErsAU+lL7","39DgfzhqtNH44Sv81kWyuO","10WtK7S1ZEG77s3UJ0fwND","65J/C1s0JAaK+MqOUZ59Uu"],["node","root","_spriteFrame","_effectAsset","_mesh","diffuseTexture","_parent","_defaultClip","_textureSetter","_N$target","dot0","dotNode","lineListNode","cutToBtn","startAnimationBtn","CutToAni","mapNode","controlNode","mainNode","CameraNode","startAnimation","spriteNode","cameraNode","stripListNode","data","stripPrefab","material","linePrefab"],[["cc.Node",["_name","_is3DNode","_groupIndex","_active","_prefab","_children","_parent","_trs","_eulerAngles","_contentSize","_components"],-1,4,2,1,7,5,5,12],["cc.Node",["_name","_is3DNode","_groupIndex","_active","_opacity","_components","_prefab","_parent","_trs","_contentSize","_children","_color","_eulerAngles"],-2,9,4,1,7,5,2,5,5],["cc.Node",["_name","_is3DNode","_groupIndex","_components","_prefab","_parent","_trs","_children","_contentSize","_eulerAngles"],0,2,4,1,7,2,5,5],["cc.Light",["_shadowMaxDepth","_type","_shadowType","_intensity","_spotExp","_shadowFrustumSize","_range","node","_color"],-4,1,5],"cc.SpriteFrame",["cc.Material",["_name","_techniqueIndex","_techniqueData"],1,11],["cc.AnimationClip",["_name","_duration","wrapMode","sample","speed","curveData"],-2,11],["cc.Widget",["_alignFlags","_left","_top","_enabled","_originalWidth","_originalHeight","node"],-3,1],["cc.Sprite",["_dstBlendFactor","_type","_sizeMode","node","_materials","_spriteFrame"],0,1,3,6],["cc.BufferRange",["length","offset"],1],["cc.PrefabInfo",["fileId","root"],2,1],["cc.MeshRenderer",["node","_materials","_mesh"],3,1,3,6],["cc.Mesh",["_native","_vertexBundles","_primitives","_minPos","_maxPos"],2,9,9,5,5],["cc.mesh.VertexBundle",["verticesCount","data","formats"],2,4,9],["cc.mesh.VertexFormat",["name","type","num"],0],["cc.mesh.Primitive",["vertexBundleIndices","data"],2,4],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_name","_techniqueData"],1],["cc.Prefab",["_name"],2],["eac1fqoprZHTYjBoHfgQd+k",["node","startAnimation","CameraNode","mainNode","controlNode","mapNode","CutToAni","startAnimationBtn","cutToBtn","lineListNode","dotNode","dot0","linePrefab"],3,1,1,1,1,1,1,1,1,1,1,1,1,6],["cc.Button",["zoomScale","_N$transition","node","_N$target"],1,1,1],["0950fGr1i5PSIsMd58sN+uj",["node","cameraNode","spriteNode","material"],3,1,1,1,6],["cc.Animation",["playOnLoad","node","_clips","_defaultClip"],2,1,3,6],["cc.Camera",["_cullingMask","_clearFlags","_farClip","_ortho","_renderStages","_alignWithScreen","_backgroundColor"],-3,5],["cc.MeshRenderer",["_materials","node"],2,1],["8ad87ad0H1JeqKKmzm/hON6",["node","stripListNode","stripPrefab"],3,1,1,6],["8d6e79j3YpBzowwoUzD3ffU",["node","meshRender","spotlLight","lightNode"],3,1,1,1,1],["cc.Label",["_string","_fontSize","_lineHeight","_N$horizontalAlign","_N$verticalAlign","node","_materials"],-2,1,3],["a75c5KjmkNCLZaoBQLhGlH/",["node","SpriteNode","AddLightNode","ExtraNode","spotlLight"],3,1,1,1,1,1]],[[10,0,1,2],[14,0,1,2,4],[1,0,1,2,7,5,6,4],[8,0,3,4,5,2],[11,0,1,2,1],[22,0,1,2,3,2],[5,0,2,2],[12,0,1,2,3,4,2],[13,0,1,2,2],[9,0,2],[9,1,0,3],[15,0,1,2],[0,0,1,2,6,5,4,4],[0,0,1,2,5,4,7,8,4],[0,0,6,5,4,2],[1,0,1,2,7,5,6,8,12,4],[1,0,4,7,5,6,11,9,8,3],[16,0,1,2,4],[0,0,1,2,6,5,4,7,8,4],[1,0,7,5,6,11,9,8,2],[5,2,1],[6,0,1,2,5,4],[6,0,1,4,2,5,5],[0,0,1,2,6,5,4,7,4],[1,0,3,7,10,5,6,9,8,3],[1,0,7,5,6,9,8,2],[7,0,1,2,6,4],[8,1,2,3,4,5,3],[20,0,1,2,3,3],[27,0,1,2,3,4,5,6,6],[5,1,2,2],[17,0,1,3],[6,0,1,3,2,5,5],[18,0,2],[0,0,1,5,10,4,9,7,3],[0,0,3,1,2,5,4,7,8,5],[0,0,6,10,4,9,2],[0,0,6,5,4,7,2],[0,0,3,1,2,6,5,4,5],[0,0,3,1,2,6,5,4,7,8,5],[0,0,1,2,6,4,4],[0,0,6,4,9,7,2],[2,0,1,2,7,3,4,8,4],[2,0,1,2,5,3,4,6,4],[2,0,1,5,3,4,6,3],[2,0,1,2,5,3,4,6,9,4],[1,0,7,10,5,6,9,8,2],[1,0,1,2,10,5,6,4],[1,0,3,1,2,7,5,6,8,5],[1,0,3,7,5,6,9,8,3],[19,0,1,2,3,4,5,6,7,8,9,10,11,12,1],[7,0,6,2],[7,3,0,4,5,6,5],[10,1,1],[8,0,3,4,2],[21,0,1,2,3,1],[23,0,1,2,3,4,5,6,7],[3,1,3,4,0,5,6],[3,3,2,0,7,4],[3,1,2,0,7,4],[3,1,6,2,0,7,8,5],[11,0,1,1],[24,0,1,2],[25,0,1,2,1],[26,0,1,2,3,1],[28,0,1,2,3,4,1]],[[[{"name":"light","rect":[0,0,691,693],"offset":[0,0],"originalSize":[691,693],"capInsets":[0,0,0,0]}],[4],0,[0],[8],[18]],[[[7,".bin",[[8,1889,[9,60448],[[1,"a_normal",5126,3],[1,"a_position",5126,3],[1,"a_uv0",5126,2]]]],[[11,[0],[10,60448,20880]]],[1,-0.199999988079071,-0.199999988079071,-0.199999988079071],[1,0.199999988079071,0.199999988079071,0.199999988079071]],-1],0,0,[],[],[]],[[{"name":"gg","rect":[0,0,370,280],"offset":[0,0],"originalSize":[370,280],"capInsets":[0,0,0,0]}],[4],0,[0],[8],[19]],[[[17,"GLS02",[{"hash":3463286687,"record":null,"name":"GLS02|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\n    in vec2 a_uv0;\n    out vec2 v_uv0;\n#endif\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}","frag":"\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  #if USE_TEXTURE\n      in vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  in vec4 v_color;\n  uniform Constant {\n  float speedL;\n  float Noisc;\n  float uv;\n  float speedM;\n};\n  vec4 c_TextureToRGBA_main_92(vec2 UV, sampler2D Texture) {\n    return texture2D(Texture, UV);\n}\nvec2 c_UV0_main_13() {\n    return v_uv0;\n}\nvec4 c_Split4_main_17(vec4 Input) {\n    return Input;\n}\nfloat c_Mul1_main_30(float InputA, float InputB) {\n    return (InputA * InputB);\n}\nfloat c_Add1_main_35(float InputA, float InputB) {\n    return (InputA + InputB);\n}\nvec2 c_2To2_main_36(float InputA, float InputB) {\n    return vec2(InputA, InputB);\n}\nfloat c_NoiseSimple_f_noise_randomValue_33(vec2 UV) {\n    return fract(sin(dot(UV, vec2(12.9898, 78.233)))*43758.5453);\n}\nfloat c_NoiseSimple_f_noise_interpolate_33(float a, float b, float t) {\n    return (1.0 - t) * a + (t * b);\n }\nfloat c_NoiseSimple_f_value_noise_33(vec2 UV) {\nvec2 i = floor(UV);\nvec2 f = fract(UV);\nf = f * f * (3.0 - 2.0 * f);\nUV = abs(fract(UV) - 0.5);\nvec2 c0 = i + vec2(0.0, 0.0);\nvec2 c1 = i + vec2(1.0, 0.0);\nvec2 c2 = i + vec2(0.0, 1.0);\nvec2 c3 = i + vec2(1.0, 1.0);\nfloat r0 = c_NoiseSimple_f_noise_randomValue_33(c0);\nfloat r1 = c_NoiseSimple_f_noise_randomValue_33(c1);\nfloat r2 = c_NoiseSimple_f_noise_randomValue_33(c2);\nfloat r3 = c_NoiseSimple_f_noise_randomValue_33(c3);\nfloat bottomOfGrid = c_NoiseSimple_f_noise_interpolate_33(r0, r1, f.x);\nfloat topOfGrid = c_NoiseSimple_f_noise_interpolate_33(r2, r3, f.x);\nfloat t = c_NoiseSimple_f_noise_interpolate_33(bottomOfGrid, topOfGrid, f.y);\nreturn t;\n }\nfloat c_NoiseSimple_main_33(vec2 UV, float Scale) {\n   float t = 0.0;\n   float freq = pow(2.0, 0.0);\n   float amp = pow(0.5, 3.0);\n   t += c_NoiseSimple_f_value_noise_33(vec2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;\n   freq = pow(2.0, 1.0);\n   amp = pow(0.5, 2.0);\n   t += c_NoiseSimple_f_value_noise_33(vec2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;\n   freq = pow(2.0, 2.0);\n   amp = pow(0.5, 1.0);\n   t += c_NoiseSimple_f_value_noise_33(vec2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;\n   return t;\n}\nfloat c_Distance1_main_44(float InputA, float InputB) {\n    return distance(InputA, InputB);\n}\nfloat c_Negate1_main_52(float Input) {\n    return (-Input);\n}\nfloat c_Exp1_main_53(float Input) {\n    return exp(Input);\n}\nfloat c_Clamp1_main_60(float Input, float Min, float Max) {\n    return clamp(Input, Min, Max);\n}\nfloat c_Pow1_main_58(float InputA, float InputB) {\n    return pow(InputA, InputB);\n}\nfloat c_Mul1_main_54(float InputA, float InputB) {\n    return (InputA * InputB);\n}\nfloat c_Mul1_main_80(float InputA, float InputB) {\n    return (InputA * InputB);\n}\nfloat c_Mul1_main_77(float InputA, float InputB) {\n    return (InputA * InputB);\n}\nfloat c_Add1_main_69(float InputA, float InputB) {\n    return (InputA + InputB);\n}\nvec2 c_2To2_main_68(float InputA, float InputB) {\n    return vec2(InputA, InputB);\n}\nfloat c_NoiseSimple_f_noise_randomValue_66(vec2 UV) {\n    return fract(sin(dot(UV, vec2(12.9898, 78.233)))*43758.5453);\n}\nfloat c_NoiseSimple_f_noise_interpolate_66(float a, float b, float t) {\n    return (1.0 - t) * a + (t * b);\n }\nfloat c_NoiseSimple_f_value_noise_66(vec2 UV) {\nvec2 i = floor(UV);\nvec2 f = fract(UV);\nf = f * f * (3.0 - 2.0 * f);\nUV = abs(fract(UV) - 0.5);\nvec2 c0 = i + vec2(0.0, 0.0);\nvec2 c1 = i + vec2(1.0, 0.0);\nvec2 c2 = i + vec2(0.0, 1.0);\nvec2 c3 = i + vec2(1.0, 1.0);\nfloat r0 = c_NoiseSimple_f_noise_randomValue_66(c0);\nfloat r1 = c_NoiseSimple_f_noise_randomValue_66(c1);\nfloat r2 = c_NoiseSimple_f_noise_randomValue_66(c2);\nfloat r3 = c_NoiseSimple_f_noise_randomValue_66(c3);\nfloat bottomOfGrid = c_NoiseSimple_f_noise_interpolate_66(r0, r1, f.x);\nfloat topOfGrid = c_NoiseSimple_f_noise_interpolate_66(r2, r3, f.x);\nfloat t = c_NoiseSimple_f_noise_interpolate_66(bottomOfGrid, topOfGrid, f.y);\nreturn t;\n }\nfloat c_NoiseSimple_main_66(vec2 UV, float Scale) {\n   float t = 0.0;\n   float freq = pow(2.0, 0.0);\n   float amp = pow(0.5, 3.0);\n   t += c_NoiseSimple_f_value_noise_66(vec2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;\n   freq = pow(2.0, 1.0);\n   amp = pow(0.5, 2.0);\n   t += c_NoiseSimple_f_value_noise_66(vec2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;\n   freq = pow(2.0, 2.0);\n   amp = pow(0.5, 1.0);\n   t += c_NoiseSimple_f_value_noise_66(vec2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;\n   return t;\n}\nfloat c_Mul1_main_71(float InputA, float InputB) {\n    return (InputA * InputB);\n}\nfloat c_Pow1_main_101(float InputA, float InputB) {\n    return pow(InputA, InputB);\n}\nfloat c_Add1_main_70(float InputA, float InputB) {\n    return (InputA + InputB);\n}\nfloat c_Mul1_main_97(float InputA, float InputB) {\n    return (InputA * InputB);\n}\nvec4 c_31To4_main_93(vec3 InputA, float InputB) {\n    return vec4(InputA, InputB);\n}\nvec4 c_Output_main_1(vec4 Color) {\n    return Color;\n}\nvoid main()\n{\n    vec4 out_Color_TextureToRGBA_92 = c_TextureToRGBA_main_92(v_uv0, texture);\n    float out_a_TextureToRGBA_92 = out_Color_TextureToRGBA_92.a;\n    vec3 out_rgb_TextureToRGBA_92 = out_Color_TextureToRGBA_92.rgb;\n    vec2 out_UV_UV0_13 = c_UV0_main_13();\n    float out_x_UV0_13 = out_UV_UV0_13.x;\n    float out_y_UV0_13 = out_UV_UV0_13.y;\n    vec4 out_Output_Split4_17 = c_Split4_main_17(vec4(cc_time));\n    float out_x_Split4_17 = out_Output_Split4_17.x;\n    float out_Output_Mul1_30 = c_Mul1_main_30(out_x_Split4_17, speedL);\n    float out_Output_Add1_35 = c_Add1_main_35(out_x_UV0_13, out_Output_Mul1_30);\n    vec2 out_Output_2To2_36 = c_2To2_main_36(out_x_UV0_13, out_Output_Add1_35);\n    float out_Output_NoiseSimple_33 = c_NoiseSimple_main_33(vec2(out_Output_2To2_36), Noisc);\n    float out_Output_Distance1_44 = c_Distance1_main_44(out_y_UV0_13, uv);\n    float out_Output_Negate1_52 = c_Negate1_main_52(out_Output_Distance1_44);\n    float out_Output_Exp1_53 = c_Exp1_main_53(out_Output_Negate1_52);\n    float out_Output_Clamp1_60 = c_Clamp1_main_60(out_Output_Exp1_53, 0.0, 1.0);\n    float out_Output_Pow1_58 = c_Pow1_main_58(out_Output_Clamp1_60, 4.0);\n    float out_Output_Mul1_54 = c_Mul1_main_54(out_Output_Pow1_58, out_Output_NoiseSimple_33);\n    float out_Output_Mul1_80 = c_Mul1_main_80(out_Output_Mul1_54, out_Output_Mul1_54);\n    float out_Output_Mul1_77 = c_Mul1_main_77(out_x_Split4_17, speedM);\n    float out_Output_Add1_69 = c_Add1_main_69(out_y_UV0_13, out_Output_Mul1_77);\n    vec2 out_Output_2To2_68 = c_2To2_main_68(out_x_UV0_13, out_Output_Add1_69);\n    float out_Output_NoiseSimple_66 = c_NoiseSimple_main_66(vec2(out_Output_2To2_68), -9.9);\n    float out_Output_Mul1_71 = c_Mul1_main_71(out_Output_NoiseSimple_66, out_Output_Pow1_58);\n    float out_Output_Pow1_101 = c_Pow1_main_101(out_Output_Mul1_71, 2.0);\n    float out_Output_Add1_70 = c_Add1_main_70(out_Output_Pow1_101, out_Output_Mul1_80);\n    float out_Output_Mul1_97 = c_Mul1_main_97(out_a_TextureToRGBA_92, out_Output_Add1_70);\n    vec4 out_Output_31To4_93 = c_31To4_main_93(vec3(out_rgb_TextureToRGBA_92), out_Output_Mul1_97);\n    gl_FragColor = c_Output_main_1(vec4(out_Output_31To4_93));\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\n    attribute vec2 a_uv0;\n    varying vec2 v_uv0;\n#endif\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}","frag":"\n  precision highp float;\nuniform vec4 cc_time;\n  #if USE_TEXTURE\n      varying vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  varying vec4 v_color;\n  uniform float speedL;\nuniform float Noisc;\nuniform float uv;\nuniform float speedM;\n  vec4 c_TextureToRGBA_main_92(vec2 UV, sampler2D Texture) {\n    return texture2D(Texture, UV);\n}\nvec2 c_UV0_main_13() {\n    return v_uv0;\n}\nvec4 c_Split4_main_17(vec4 Input) {\n    return Input;\n}\nfloat c_Mul1_main_30(float InputA, float InputB) {\n    return (InputA * InputB);\n}\nfloat c_Add1_main_35(float InputA, float InputB) {\n    return (InputA + InputB);\n}\nvec2 c_2To2_main_36(float InputA, float InputB) {\n    return vec2(InputA, InputB);\n}\nfloat c_NoiseSimple_f_noise_randomValue_33(vec2 UV) {\n    return fract(sin(dot(UV, vec2(12.9898, 78.233)))*43758.5453);\n}\nfloat c_NoiseSimple_f_noise_interpolate_33(float a, float b, float t) {\n    return (1.0 - t) * a + (t * b);\n }\nfloat c_NoiseSimple_f_value_noise_33(vec2 UV) {\nvec2 i = floor(UV);\nvec2 f = fract(UV);\nf = f * f * (3.0 - 2.0 * f);\nUV = abs(fract(UV) - 0.5);\nvec2 c0 = i + vec2(0.0, 0.0);\nvec2 c1 = i + vec2(1.0, 0.0);\nvec2 c2 = i + vec2(0.0, 1.0);\nvec2 c3 = i + vec2(1.0, 1.0);\nfloat r0 = c_NoiseSimple_f_noise_randomValue_33(c0);\nfloat r1 = c_NoiseSimple_f_noise_randomValue_33(c1);\nfloat r2 = c_NoiseSimple_f_noise_randomValue_33(c2);\nfloat r3 = c_NoiseSimple_f_noise_randomValue_33(c3);\nfloat bottomOfGrid = c_NoiseSimple_f_noise_interpolate_33(r0, r1, f.x);\nfloat topOfGrid = c_NoiseSimple_f_noise_interpolate_33(r2, r3, f.x);\nfloat t = c_NoiseSimple_f_noise_interpolate_33(bottomOfGrid, topOfGrid, f.y);\nreturn t;\n }\nfloat c_NoiseSimple_main_33(vec2 UV, float Scale) {\n   float t = 0.0;\n   float freq = pow(2.0, 0.0);\n   float amp = pow(0.5, 3.0);\n   t += c_NoiseSimple_f_value_noise_33(vec2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;\n   freq = pow(2.0, 1.0);\n   amp = pow(0.5, 2.0);\n   t += c_NoiseSimple_f_value_noise_33(vec2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;\n   freq = pow(2.0, 2.0);\n   amp = pow(0.5, 1.0);\n   t += c_NoiseSimple_f_value_noise_33(vec2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;\n   return t;\n}\nfloat c_Distance1_main_44(float InputA, float InputB) {\n    return distance(InputA, InputB);\n}\nfloat c_Negate1_main_52(float Input) {\n    return (-Input);\n}\nfloat c_Exp1_main_53(float Input) {\n    return exp(Input);\n}\nfloat c_Clamp1_main_60(float Input, float Min, float Max) {\n    return clamp(Input, Min, Max);\n}\nfloat c_Pow1_main_58(float InputA, float InputB) {\n    return pow(InputA, InputB);\n}\nfloat c_Mul1_main_54(float InputA, float InputB) {\n    return (InputA * InputB);\n}\nfloat c_Mul1_main_80(float InputA, float InputB) {\n    return (InputA * InputB);\n}\nfloat c_Mul1_main_77(float InputA, float InputB) {\n    return (InputA * InputB);\n}\nfloat c_Add1_main_69(float InputA, float InputB) {\n    return (InputA + InputB);\n}\nvec2 c_2To2_main_68(float InputA, float InputB) {\n    return vec2(InputA, InputB);\n}\nfloat c_NoiseSimple_f_noise_randomValue_66(vec2 UV) {\n    return fract(sin(dot(UV, vec2(12.9898, 78.233)))*43758.5453);\n}\nfloat c_NoiseSimple_f_noise_interpolate_66(float a, float b, float t) {\n    return (1.0 - t) * a + (t * b);\n }\nfloat c_NoiseSimple_f_value_noise_66(vec2 UV) {\nvec2 i = floor(UV);\nvec2 f = fract(UV);\nf = f * f * (3.0 - 2.0 * f);\nUV = abs(fract(UV) - 0.5);\nvec2 c0 = i + vec2(0.0, 0.0);\nvec2 c1 = i + vec2(1.0, 0.0);\nvec2 c2 = i + vec2(0.0, 1.0);\nvec2 c3 = i + vec2(1.0, 1.0);\nfloat r0 = c_NoiseSimple_f_noise_randomValue_66(c0);\nfloat r1 = c_NoiseSimple_f_noise_randomValue_66(c1);\nfloat r2 = c_NoiseSimple_f_noise_randomValue_66(c2);\nfloat r3 = c_NoiseSimple_f_noise_randomValue_66(c3);\nfloat bottomOfGrid = c_NoiseSimple_f_noise_interpolate_66(r0, r1, f.x);\nfloat topOfGrid = c_NoiseSimple_f_noise_interpolate_66(r2, r3, f.x);\nfloat t = c_NoiseSimple_f_noise_interpolate_66(bottomOfGrid, topOfGrid, f.y);\nreturn t;\n }\nfloat c_NoiseSimple_main_66(vec2 UV, float Scale) {\n   float t = 0.0;\n   float freq = pow(2.0, 0.0);\n   float amp = pow(0.5, 3.0);\n   t += c_NoiseSimple_f_value_noise_66(vec2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;\n   freq = pow(2.0, 1.0);\n   amp = pow(0.5, 2.0);\n   t += c_NoiseSimple_f_value_noise_66(vec2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;\n   freq = pow(2.0, 2.0);\n   amp = pow(0.5, 1.0);\n   t += c_NoiseSimple_f_value_noise_66(vec2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;\n   return t;\n}\nfloat c_Mul1_main_71(float InputA, float InputB) {\n    return (InputA * InputB);\n}\nfloat c_Pow1_main_101(float InputA, float InputB) {\n    return pow(InputA, InputB);\n}\nfloat c_Add1_main_70(float InputA, float InputB) {\n    return (InputA + InputB);\n}\nfloat c_Mul1_main_97(float InputA, float InputB) {\n    return (InputA * InputB);\n}\nvec4 c_31To4_main_93(vec3 InputA, float InputB) {\n    return vec4(InputA, InputB);\n}\nvec4 c_Output_main_1(vec4 Color) {\n    return Color;\n}\nvoid main()\n{\n    vec4 out_Color_TextureToRGBA_92 = c_TextureToRGBA_main_92(v_uv0, texture);\n    float out_a_TextureToRGBA_92 = out_Color_TextureToRGBA_92.a;\n    vec3 out_rgb_TextureToRGBA_92 = out_Color_TextureToRGBA_92.rgb;\n    vec2 out_UV_UV0_13 = c_UV0_main_13();\n    float out_x_UV0_13 = out_UV_UV0_13.x;\n    float out_y_UV0_13 = out_UV_UV0_13.y;\n    vec4 out_Output_Split4_17 = c_Split4_main_17(vec4(cc_time));\n    float out_x_Split4_17 = out_Output_Split4_17.x;\n    float out_Output_Mul1_30 = c_Mul1_main_30(out_x_Split4_17, speedL);\n    float out_Output_Add1_35 = c_Add1_main_35(out_x_UV0_13, out_Output_Mul1_30);\n    vec2 out_Output_2To2_36 = c_2To2_main_36(out_x_UV0_13, out_Output_Add1_35);\n    float out_Output_NoiseSimple_33 = c_NoiseSimple_main_33(vec2(out_Output_2To2_36), Noisc);\n    float out_Output_Distance1_44 = c_Distance1_main_44(out_y_UV0_13, uv);\n    float out_Output_Negate1_52 = c_Negate1_main_52(out_Output_Distance1_44);\n    float out_Output_Exp1_53 = c_Exp1_main_53(out_Output_Negate1_52);\n    float out_Output_Clamp1_60 = c_Clamp1_main_60(out_Output_Exp1_53, 0.0, 1.0);\n    float out_Output_Pow1_58 = c_Pow1_main_58(out_Output_Clamp1_60, 4.0);\n    float out_Output_Mul1_54 = c_Mul1_main_54(out_Output_Pow1_58, out_Output_NoiseSimple_33);\n    float out_Output_Mul1_80 = c_Mul1_main_80(out_Output_Mul1_54, out_Output_Mul1_54);\n    float out_Output_Mul1_77 = c_Mul1_main_77(out_x_Split4_17, speedM);\n    float out_Output_Add1_69 = c_Add1_main_69(out_y_UV0_13, out_Output_Mul1_77);\n    vec2 out_Output_2To2_68 = c_2To2_main_68(out_x_UV0_13, out_Output_Add1_69);\n    float out_Output_NoiseSimple_66 = c_NoiseSimple_main_66(vec2(out_Output_2To2_68), -9.9);\n    float out_Output_Mul1_71 = c_Mul1_main_71(out_Output_NoiseSimple_66, out_Output_Pow1_58);\n    float out_Output_Pow1_101 = c_Pow1_main_101(out_Output_Mul1_71, 2.0);\n    float out_Output_Add1_70 = c_Add1_main_70(out_Output_Pow1_101, out_Output_Mul1_80);\n    float out_Output_Mul1_97 = c_Mul1_main_97(out_a_TextureToRGBA_92, out_Output_Add1_70);\n    vec4 out_Output_31To4_93 = c_31To4_main_93(vec3(out_rgb_TextureToRGBA_92), out_Output_Mul1_97);\n    gl_FragColor = c_Output_main_1(vec4(out_Output_31To4_93));\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_TINT","type":"boolean","defines":[]}],"blocks":[{"name":"Constant","binding":0,"members":[{"name":"speedL","type":13,"count":1},{"name":"Noisc","type":13,"count":1},{"name":"uv","type":13,"count":1},{"name":"speedM","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"GLS02|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"speedL":{"type":13,"value":[0.3]},"Noisc":{"type":13,"value":[150]},"uv":{"type":13,"value":[0.3]},"speedM":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]],[[[17,"Ebloom2",[{"hash":3345863,"record":null,"name":"Ebloom2|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\n    in vec2 a_uv0;\n    out vec2 v_uv0;\n#endif\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}","frag":"\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  #if USE_TEXTURE\n      in vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  in vec4 v_color;\n  uniform Constant {\n  vec2 uSize;\n  float Intensity;\n  float opacity;\n};\n  vec4 c_TextureToRGBA_main_3(vec2 UV, sampler2D Texture) {\n    return texture2D(Texture, UV);\n}\nvec2 c_UV0_main_6() {\n    return v_uv0;\n}\nvec4 c_GaussianBlur_main_5(sampler2D Tex, vec2 UV, vec2 Size, float Intensity)\n{\n    vec4 sum = vec4(0);\n    vec2 offset = vec2(0.0);\n    vec2 normalizedSize = vec2(1.0 / Size);\n    offset = normalizedSize * vec2(-2.0, -2.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 1.0;\n    offset = normalizedSize * vec2(-1.0, -2.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 4.0;\n    offset = normalizedSize * vec2(0.0, -2.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 7.0;\n    offset = normalizedSize * vec2(1.0, -2.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 4.0;\n    offset = normalizedSize * vec2(2.0, -2.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 1.0;\n    offset = normalizedSize * vec2(-2.0, -1.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 4.0;\n    offset = normalizedSize * vec2(-1.0, -1.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 16.0;\n    offset = normalizedSize * vec2(0.0, -1.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 26.0;\n    offset = normalizedSize * vec2(1.0, -1.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 16.0;\n    offset = normalizedSize * vec2(2.0, -1.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 4.0;\n    offset = normalizedSize * vec2(-2.0, 0.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 7.0;\n    offset = normalizedSize * vec2(-1.0, 0.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 26.0;\n    offset = normalizedSize * vec2(0.0, 0.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 41.0;\n    offset = normalizedSize * vec2(1.0, 0.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 26.0;\n    offset = normalizedSize * vec2(2.0, 0.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 7.0;\n    offset = normalizedSize * vec2(-2.0, 1.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 4.0;\n    offset = normalizedSize * vec2(-1.0, 1.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 16.0;\n    offset = normalizedSize * vec2(0.0, 1.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 26.0;\n    offset = normalizedSize * vec2(1.0, 1.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 16.0;\n    offset = normalizedSize * vec2(2.0, 1.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 4.0;\n    offset = normalizedSize * vec2(-2.0, 2.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 1.0;\n    offset = normalizedSize * vec2(-1.0, 2.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 4.0;\n    offset = normalizedSize * vec2(0.0, 2.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 7.0;\n    offset = normalizedSize * vec2(1.0, 2.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 4.0;\n    offset = normalizedSize * vec2(2.0, 2.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 1.0;\n    return vec4((sum / 273.0).rgb, texture2D(Tex, UV).a);\n}\nvec4 c_BlendLinearDodge_main_4(vec4 Base, vec4 Blend, float Opacity) {\n    return mix(Base, Base + Blend, Opacity);\n}\nvec4 c_Add4_main_10(vec4 InputA, vec4 InputB) {\n    return (InputA + InputB);\n}\nvec4 c_Output_main_1(vec4 Color) {\n    return Color;\n}\nvoid main()\n{\n    vec4 out_Color_TextureToRGBA_3 = c_TextureToRGBA_main_3(v_uv0, texture);\n    vec2 out_UV_UV0_6 = c_UV0_main_6();\n    vec4 out_Output_GaussianBlur_5 = c_GaussianBlur_main_5(texture, vec2(out_UV_UV0_6), vec2(uSize), Intensity);\n    vec4 out_Color_BlendLinearDodge_4 = c_BlendLinearDodge_main_4(vec4(out_Output_GaussianBlur_5), vec4(out_Color_TextureToRGBA_3), opacity);\n    vec4 out_Output_Add4_10 = c_Add4_main_10(vec4(out_Color_BlendLinearDodge_4), vec4(out_Output_GaussianBlur_5));\n    gl_FragColor = c_Output_main_1(vec4(out_Output_Add4_10));\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\n    attribute vec2 a_uv0;\n    varying vec2 v_uv0;\n#endif\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}","frag":"\n  precision highp float;\n  #if USE_TEXTURE\n      varying vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  varying vec4 v_color;\n  uniform vec2 uSize;\nuniform float Intensity;\nuniform float opacity;\n  vec4 c_TextureToRGBA_main_3(vec2 UV, sampler2D Texture) {\n    return texture2D(Texture, UV);\n}\nvec2 c_UV0_main_6() {\n    return v_uv0;\n}\nvec4 c_GaussianBlur_main_5(sampler2D Tex, vec2 UV, vec2 Size, float Intensity)\n{\n    vec4 sum = vec4(0);\n    vec2 offset = vec2(0.0);\n    vec2 normalizedSize = vec2(1.0 / Size);\n    offset = normalizedSize * vec2(-2.0, -2.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 1.0;\n    offset = normalizedSize * vec2(-1.0, -2.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 4.0;\n    offset = normalizedSize * vec2(0.0, -2.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 7.0;\n    offset = normalizedSize * vec2(1.0, -2.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 4.0;\n    offset = normalizedSize * vec2(2.0, -2.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 1.0;\n    offset = normalizedSize * vec2(-2.0, -1.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 4.0;\n    offset = normalizedSize * vec2(-1.0, -1.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 16.0;\n    offset = normalizedSize * vec2(0.0, -1.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 26.0;\n    offset = normalizedSize * vec2(1.0, -1.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 16.0;\n    offset = normalizedSize * vec2(2.0, -1.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 4.0;\n    offset = normalizedSize * vec2(-2.0, 0.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 7.0;\n    offset = normalizedSize * vec2(-1.0, 0.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 26.0;\n    offset = normalizedSize * vec2(0.0, 0.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 41.0;\n    offset = normalizedSize * vec2(1.0, 0.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 26.0;\n    offset = normalizedSize * vec2(2.0, 0.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 7.0;\n    offset = normalizedSize * vec2(-2.0, 1.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 4.0;\n    offset = normalizedSize * vec2(-1.0, 1.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 16.0;\n    offset = normalizedSize * vec2(0.0, 1.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 26.0;\n    offset = normalizedSize * vec2(1.0, 1.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 16.0;\n    offset = normalizedSize * vec2(2.0, 1.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 4.0;\n    offset = normalizedSize * vec2(-2.0, 2.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 1.0;\n    offset = normalizedSize * vec2(-1.0, 2.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 4.0;\n    offset = normalizedSize * vec2(0.0, 2.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 7.0;\n    offset = normalizedSize * vec2(1.0, 2.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 4.0;\n    offset = normalizedSize * vec2(2.0, 2.0) * Intensity;\n    sum += texture2D(Tex, UV + offset) * 1.0;\n    return vec4((sum / 273.0).rgb, texture2D(Tex, UV).a);\n}\nvec4 c_BlendLinearDodge_main_4(vec4 Base, vec4 Blend, float Opacity) {\n    return mix(Base, Base + Blend, Opacity);\n}\nvec4 c_Add4_main_10(vec4 InputA, vec4 InputB) {\n    return (InputA + InputB);\n}\nvec4 c_Output_main_1(vec4 Color) {\n    return Color;\n}\nvoid main()\n{\n    vec4 out_Color_TextureToRGBA_3 = c_TextureToRGBA_main_3(v_uv0, texture);\n    vec2 out_UV_UV0_6 = c_UV0_main_6();\n    vec4 out_Output_GaussianBlur_5 = c_GaussianBlur_main_5(texture, vec2(out_UV_UV0_6), vec2(uSize), Intensity);\n    vec4 out_Color_BlendLinearDodge_4 = c_BlendLinearDodge_main_4(vec4(out_Output_GaussianBlur_5), vec4(out_Color_TextureToRGBA_3), opacity);\n    vec4 out_Output_Add4_10 = c_Add4_main_10(vec4(out_Color_BlendLinearDodge_4), vec4(out_Output_GaussianBlur_5));\n    gl_FragColor = c_Output_main_1(vec4(out_Output_Add4_10));\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_TINT","type":"boolean","defines":[]}],"blocks":[{"name":"Constant","binding":0,"members":[{"name":"uSize","type":14,"count":1},{"name":"Intensity","type":13,"count":1},{"name":"opacity","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"Ebloom2|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"uSize":{"type":14,"value":[300,300]},"Intensity":{"type":13,"value":[1]},"opacity":{"type":13,"value":[1]}}}]}]]],0,0,[],[],[]],[[[6,"map2",[{},"0",11,[{"defines":{"USE_DIFFUSE_TEXTURE":true,"USE_ALPHA_TEST":false}},"props",11,[{"alphaThreshold":0.1},"diffuseColor",8,[4,3359446015],"diffuseTexture",6,0]]]]],0,0,[0,0],[5,3],[7,2]],[[[6,"Ebloom2",[{},"0",11,[{"defines":{"USE_TEXTURE":false}},"props",11,[{"Intensity":1,"opacity":3},"uSize",8,[0,300,300]]]]]],0,0,[0],[3],[20]],[[[7,".bin",[[8,4,[9,128],[[1,"a_normal",5126,3],[1,"a_position",5126,3],[1,"a_uv0",5126,2]]]],[[11,[0],[10,128,12]]],[1,-0.199999988079071,-0.199999988079071,0],[1,0.199999988079071,0.199999988079071,0]],-1],0,0,[],[],[]],[[[21,"eff_line0_rotate",0.5,2,[{},"props",11,[{},"eulerAngles",12,[[[{"frame":0},"value",8,[1,0,0,0]],[{"frame":0.5},"value",8,[1,0,0,360]]],11,11]]]]],0,0,[],[],[]],[[[32,"eff_map2_rotate",30,2,2,[{},"props",11,[{},"eulerAngles",12,[[[{"frame":0},"value",8,[1,0,0,0]],[{"frame":30},"value",8,[1,0,0,360]]],11,11]]]]],0,0,[],[],[]],[[[7,".bin",[[8,4,[9,128],[[1,"a_normal",5126,3],[1,"a_position",5126,3],[1,"a_uv0",5126,2]]]],[[11,[0],[10,128,12]]],[1,-0.199999988079071,-0.199999988079071,0],[1,0.199999988079071,0.199999988079071,0]],-1],0,0,[],[],[]],[[[7,".bin",[[8,4,[9,128],[[1,"a_normal",5126,3],[1,"a_position",5126,3],[1,"a_uv0",5126,2]]]],[[11,[0],[10,128,12]]],[1,-0.199999988079071,-0.199999988079071,0],[1,0.199999988079071,0.199999988079071,0]],-1],0,0,[],[],[]],[[[6,"map",[{},"0",11,[{"defines":{"USE_DIFFUSE_TEXTURE":true,"USE_ALPHA_TEST":true}},"props",11,[{"alphaThreshold":0.1},"diffuseColor",8,[4,4290324165],"emissiveColor",8,[4,3892314112],"diffuseTexture",6,0]]]]],0,0,[0,0],[5,3],[7,6]],[[[22,"eff_circle_rotate",7.016666666666667,0.2,2,[{},"props",11,[{},"eulerAngles",12,[[[{"frame":0},"value",8,[1,0,0,0]],[{"frame":7.016666666666667},"value",8,[1,0,0,-360]]],11,11]]]]],0,0,[],[],[]],[[[22,"eff_line1_rotate",0.5,0.8,2,[{},"props",11,[{},"eulerAngles",12,[[[{"frame":0},"value",8,[1,0,0,0]],[{"frame":0.5},"value",8,[1,0,0,360]]],11,11]]]]],0,0,[],[],[]],[[[21,"eff_line2_rotate",0.5,2,[{},"props",11,[{},"eulerAngles",12,[[[{"frame":0},"value",8,[1,0,0,0]],[{"frame":0.5},"value",8,[1,0,0,-360]]],11,11]]]]],0,0,[],[],[]],[[[6,"map_line",[{},"0",11,[{"defines":{"USE_DIFFUSE_TEXTURE":true,"USE_ALPHA_TEST":true}},"props",11,[{"alphaThreshold":0.9},"diffuseColor",8,[4,4284622533],"emissiveColor",8,[4,3909025950],"diffuseTexture",6,0]]]]],0,0,[0,0],[5,3],[21,6]],[[[31,"GLS02",{"0":{"props":{"speedL":"0.3","Noisc":"150.0","uv":"0.3","speedM":"0.5"},"defines":{"USE_TEXTURE":true}}}]],0,0,[0],[3],[22]],[[[30,1,[{},"0",11,[{"defines":{"USE_DIFFUSE_TEXTURE":true}},"props",11,[{},"diffuseColor",8,[4,2533359615],"diffuseTexture",6,0]]]]],0,0,[0,0],[5,3],[23,2]],[[[20,[{},"0",11,[{"defines":{"USE_DIFFUSE_TEXTURE":true,"INPUT_IS_GAMMA":false,"USE_ALPHA_TEST":true}},"props",11,[{"alphaThreshold":0.5},"diffuseColor",8,[4,2520585215],"diffuseTexture",6,0]]]]],0,0,[0,0],[5,3],[24,2]],[[[17,"builtin-phong",[{"hash":3560892936,"record":null,"name":"builtin-phong|phong-vs|phong-fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n#if CC_USE_SKINNING\n  in vec4 a_weights;\n  in vec4 a_joints;\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform SKINNING {\n      vec2 jointsTextureSize;\n    };\n    uniform sampler2D jointsTexture;\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = texture(jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture(jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture(jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture(jointsTexture, vec2(dx * (x + 3.5), y));\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture(jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform JOINT_MATRIX {\n      mat4 jointMatrices[50];\n    };\n    mat4 getBoneMatrix(const in float i) {\n      return jointMatrices[int(i)];\n    }\n  #endif\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\nstruct StandardVertInput {\n  vec2 uv;\n  vec4 position;\n  vec3 normal;\n  vec4 tangent;\n  vec4 color;\n};\nin vec3 a_position;\n#if CC_USE_ATTRIBUTE_UV0\nin vec2 a_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\nin vec4 a_color;\n#endif\n#if CC_USE_ATTRIBUTE_NORMAL\nin vec3 a_normal;\n#endif\n#if CC_USE_ATTRIBUTE_TANGENT\nin vec4 a_tangent;\n#endif\nvoid CCAttribute (out StandardVertInput In) {\n  In.position = vec4(a_position, 1.0);\n  #if CC_USE_ATTRIBUTE_UV0\n    In.uv = a_uv0;\n  #else\n    In.uv = vec2(0.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n    In.color = a_color;\n  #else\n    In.color = vec4(1.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_NORMAL\n    In.normal = a_normal;\n  #else\n    In.normal = vec3(0.0, 1.0, 0.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_TANGENT\n    In.tangent = a_tangent;\n  #else\n    In.tangent = vec4(1.0, 0.0, 0.0, 0.0);\n  #endif\n}\nvoid CCVertInput(out StandardVertInput In) {\n  CCAttribute(In);\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    In.position = m * In.position;\n    #if CC_USE_ATTRIBUTE_NORMAL\n      In.normal = (m * vec4(In.normal, 0)).xyz;\n    #endif\n    #if CC_USE_ATTRIBUTE_TANGENT\n      In.tangent = m * In.tangent;\n    #endif\n  #endif\n}\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  uniform CC_SHADOW {\n    mat4 cc_shadow_lightViewProjMatrix[2];\n    vec4 cc_shadow_info[2];\n  };\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\nvoid CCShadowInput (vec3 worldPos) {\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n    v_posLightSpace[i] = cc_shadow_lightViewProjMatrix[i] * vec4(worldPos, 1.0);\n    v_depth[i] = (v_posLightSpace[i].z + cc_shadow_info[i].x) / (cc_shadow_info[i].x + cc_shadow_info[i].y);\n  }\n  #endif\n}\nuniform MAIN_TILING {\n  vec2 mainTiling;\n  vec2 mainOffset;\n};\n#if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE || USE_SPECULAR_TEXTURE || USE_NORMAL_TEXTURE)\n  out mediump vec2 v_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\n  out lowp vec4 v_color;\n#endif\n#if USE_NORMAL_TEXTURE\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\nout vec3 v_worldNormal;\nout vec3 v_worldPos;\nout vec3 v_viewDirection;\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  vec4 position = In.position;\n  v_worldNormal = normalize((cc_matWorldIT * vec4(In.normal, 0)).xyz);\n  v_worldPos = (cc_matWorld * position).xyz;\n  v_viewDirection = normalize(cc_cameraPos.xyz - v_worldPos);\n  #if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE || USE_SPECULAR_TEXTURE || USE_NORMAL_TEXTURE)\n    v_uv0 = In.uv * mainTiling + mainOffset;\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n    v_color = In.color;\n  #endif\n  #if USE_NORMAL_TEXTURE\n    v_tangent = normalize((cc_matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_worldNormal, v_tangent) * In.tangent.w;\n  #endif\n  CCShadowInput(v_worldPos);\n  gl_Position = cc_matViewProj * cc_matWorld * position;\n}","frag":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform PhongFrag {\n  lowp vec4 diffuseColor;\n  lowp vec4 specularColor;\n  lowp vec4 emissiveColor;\n  float glossiness;\n};\n#if USE_DIFFUSE_TEXTURE\n  uniform sampler2D diffuseTexture;\n#endif\n#if USE_SPECULAR && USE_SPECULAR_TEXTURE\n  uniform sampler2D specularTexture;\n#endif\n#if USE_EMISSIVE && USE_EMISSIVE_TEXTURE\n  uniform sampler2D emissiveTexture;\n#endif\n#if USE_NORMAL_TEXTURE\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalTexture;\n#endif\nin vec3 v_worldNormal;\nin vec3 v_worldPos;\nin vec3 v_viewDirection;\n#if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || (USE_EMISSIVE && USE_EMISSIVE_TEXTURE) || (USE_SPECULAR && USE_SPECULAR_TEXTURE) || USE_NORMAL_TEXTURE)\n  in mediump vec2 v_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\n  in lowp vec4 v_color;\n#endif\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  uniform CC_SHADOW {\n    mat4 cc_shadow_lightViewProjMatrix[2];\n    vec4 cc_shadow_info[2];\n  };\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\nfloat getDepth(sampler2D shadowMap, vec2 shadowUV) {\n    return unpackRGBAToDepth(texture(shadowMap, shadowUV));\n}\nfloat computeFallOff(float shadow, vec2 coords, float frustumEdgeFalloff) {\n  return shadow;\n}\nfloat shadowSimple(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness) {\n  float closestDepth = getDepth(shadowMap, shadowUV);\n  return currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n}\nfloat shadowPCF3X3(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness, float shadowSize) {\n  float shadow = 0.0;\n  for (int x = -1; x <= 1; ++x) {\n    for (int y = -1; y <= 1; ++y) {\n      float closestDepth = getDepth(shadowMap, shadowUV + vec2(x, y) * 1.0/shadowSize);\n      shadow += currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n    }\n  }\n  shadow /= 9.0;\n  return shadow;\n}\nfloat shadowPCF5X5(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness, float shadowSize) {\n  float shadow = 0.0;\n  for (int x = -2; x <= 2; ++x) {\n    for (int y = -2; y <= 2; ++y) {\n      float closestDepth = getDepth(shadowMap, shadowUV + vec2(x, y) * 1.0/shadowSize);\n      shadow += currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n    }\n  }\n  shadow /= 25.0;\n  return shadow;\n}\n#if CC_NUM_LIGHTS > 0\nuniform CCLIGHTS {\n  vec4 cc_lightPositionAndRange[4];\n  vec4 cc_lightDirection[4];\n  vec4 cc_lightColor[4];\n};\n#endif\nstruct LightInfo {\n  vec3 lightDir;\n  vec3 radiance;\n  vec4 lightColor;\n};\nLightInfo computeDirectionalLighting(\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  ret.lightDir = -normalize(lightDirection.xyz);\n  ret.radiance = lightColor.rgb;\n  ret.lightColor = lightColor;\n  return ret;\n}\nLightInfo computePointLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  ret.lightDir = normalize(lightDir);\n  ret.radiance = lightColor.rgb * attenuation;\n  ret.lightColor = lightColor;\n  return ret;\n}\nLightInfo computeSpotLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  lightDir = normalize(lightDir);\n  float cosConeAngle = max(0., dot(lightDirection.xyz, -lightDir));\n  cosConeAngle = cosConeAngle < lightDirection.w ? 0. : cosConeAngle;\n  cosConeAngle = pow(cosConeAngle, lightColor.w);\n  ret.lightDir = lightDir;\n  ret.radiance = lightColor.rgb * attenuation * cosConeAngle;\n  ret.lightColor = lightColor;\n  return ret;\n}\nstruct Lighting {\n  vec3 diffuse;\n  vec3 specular;\n};\nstruct PhongSurface {\n  vec3 diffuse;\n  vec3 emissive;\n  vec3 specular;\n  float opacity;\n  float glossiness;\n  vec3 position;\n  vec3 normal;\n  vec3 viewDirection;\n};\nLighting brdf (PhongSurface s, LightInfo info) {\n  Lighting result;\n  float ndh = 0.0;\n  vec3 halfDir = normalize(s.viewDirection + info.lightDir);\n  float NdotH = max(0.0, dot(s.normal, halfDir));\n  NdotH = pow(NdotH, max(1.0, s.glossiness * 128.0));\n  result.diffuse = info.radiance * max(0.0, dot(s.normal, info.lightDir));\n  result.specular = info.radiance * NdotH;\n  return result;\n}\nvec4 composePhongShading (Lighting lighting, PhongSurface s) {\n  vec4 o = vec4(0.0, 0.0, 0.0, 1.0);\n  o.rgb = lighting.diffuse * s.diffuse;\n  #if USE_EMISSIVE\n    o.rgb += s.emissive;\n  #endif\n  #if USE_SPECULAR\n    o.rgb += lighting.specular * s.specular;\n  #endif\n  o.a = s.opacity;\n  return o;\n}\nvec3 ambient(PhongSurface s, vec4 ambientColor) {\n  return s.diffuse * ambientColor.rgb;\n}\nvec4 CCPhongShading (in PhongSurface s) {\n  Lighting result;\n  result.diffuse = vec3(0, 0, 0);\n  result.specular = vec3(0, 0, 0);\n  #if CC_NUM_LIGHTS > 0\n    #if CC_LIGHT_0_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[0]);\n    #else\n      LightInfo info0;\n      #if CC_LIGHT_0_TYPE == 0\n        info0 = computeDirectionalLighting(cc_lightDirection[0], cc_lightColor[0]);\n      #elif CC_LIGHT_0_TYPE == 1\n        info0 = computePointLighting(s.position, cc_lightPositionAndRange[0], cc_lightColor[0]);\n      #elif CC_LIGHT_0_TYPE == 2\n        info0 = computeSpotLighting(s.position, cc_lightPositionAndRange[0], cc_lightDirection[0], cc_lightColor[0]);\n      #endif\n      Lighting result0 = brdf(s, info0);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n    float shadow_0 = 1.0;\n    vec2 projCoords0 = v_posLightSpace[0].xy / v_posLightSpace[0].w;\n    vec2 shadowUV0 = projCoords0 * 0.5 + vec2(0.5);\n    if (shadowUV0.x >= 0.0 && shadowUV0.x <= 1.0 && shadowUV0.y >= 0.0 && shadowUV0.y <= 1.0) {\n      float currentDepth0 = clamp(v_depth[0], 0.0, 1.0);\n      #if CC_SHADOW_0_TYPE == 3\n        shadow_0 = shadowPCF3X3(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w, cc_shadow_info[0].z);\n      #elif CC_SHADOW_0_TYPE == 4\n        shadow_0 = shadowPCF5X5(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w, cc_shadow_info[0].z);\n      #else\n        shadow_0 = shadowSimple(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w);\n      #endif\n      shadow_0 = computeFallOff(shadow_0, projCoords0, 0.0);\n    }\n    result0.diffuse *= shadow_0;\n    result0.specular *= shadow_0;\n  #endif\n      result.diffuse += result0.diffuse;\n      result.specular += result0.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 1\n    #if CC_LIGHT_1_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[1]);\n    #else\n      LightInfo info1;\n      #if CC_LIGHT_1_TYPE == 0\n        info1 = computeDirectionalLighting(cc_lightDirection[1], cc_lightColor[1]);\n      #elif CC_LIGHT_1_TYPE == 1\n        info1 = computePointLighting(s.position, cc_lightPositionAndRange[1], cc_lightColor[1]);\n      #elif CC_LIGHT_1_TYPE == 2\n        info1 = computeSpotLighting(s.position, cc_lightPositionAndRange[1], cc_lightDirection[1], cc_lightColor[1]);\n      #endif\n      Lighting result1 = brdf(s, info1);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 1\n    float shadow_1 = 1.0;\n    vec2 projCoords1 = v_posLightSpace[1].xy / v_posLightSpace[1].w;\n    vec2 shadowUV1 = projCoords1 * 0.5 + vec2(0.5);\n    if (shadowUV1.x >= 0.0 && shadowUV1.x <= 1.0 && shadowUV1.y >= 0.0 && shadowUV1.y <= 1.0) {\n      float currentDepth1 = clamp(v_depth[1], 0.0, 1.0);\n      #if CC_SHADOW_1_TYPE == 3\n        shadow_1 = shadowPCF3X3(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w, cc_shadow_info[1].z);\n      #elif CC_SHADOW_1_TYPE == 4\n        shadow_1 = shadowPCF5X5(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w, cc_shadow_info[1].z);\n      #else\n        shadow_1 = shadowSimple(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w);\n      #endif\n      shadow_1 = computeFallOff(shadow_1, projCoords1, 0.0);\n    }\n    result1.diffuse *= shadow_1;\n    result1.specular *= shadow_1;\n  #endif\n      result.diffuse += result1.diffuse;\n      result.specular += result1.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 2\n    #if CC_LIGHT_2_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[2]);\n    #else\n      LightInfo info2;\n      #if CC_LIGHT_2_TYPE == 0\n        info2 = computeDirectionalLighting(cc_lightDirection[2], cc_lightColor[2]);\n      #elif CC_LIGHT_2_TYPE == 1\n        info2 = computePointLighting(s.position, cc_lightPositionAndRange[2], cc_lightColor[2]);\n      #elif CC_LIGHT_2_TYPE == 2\n        info2 = computeSpotLighting(s.position, cc_lightPositionAndRange[2], cc_lightDirection[2], cc_lightColor[2]);\n      #endif\n      Lighting result2 = brdf(s, info2);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 2\n    float shadow_2 = 1.0;\n    vec2 projCoords2 = v_posLightSpace[2].xy / v_posLightSpace[2].w;\n    vec2 shadowUV2 = projCoords2 * 0.5 + vec2(0.5);\n    if (shadowUV2.x >= 0.0 && shadowUV2.x <= 1.0 && shadowUV2.y >= 0.0 && shadowUV2.y <= 1.0) {\n      float currentDepth2 = clamp(v_depth[2], 0.0, 1.0);\n      #if CC_SHADOW_2_TYPE == 3\n        shadow_2 = shadowPCF3X3(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w, cc_shadow_info[2].z);\n      #elif CC_SHADOW_2_TYPE == 4\n        shadow_2 = shadowPCF5X5(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w, cc_shadow_info[2].z);\n      #else\n        shadow_2 = shadowSimple(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w);\n      #endif\n      shadow_2 = computeFallOff(shadow_2, projCoords2, 0.0);\n    }\n    result2.diffuse *= shadow_2;\n    result2.specular *= shadow_2;\n  #endif\n      result.diffuse += result2.diffuse;\n      result.specular += result2.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 3\n    #if CC_LIGHT_3_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[3]);\n    #else\n      LightInfo info3;\n      #if CC_LIGHT_3_TYPE == 0\n        info3 = computeDirectionalLighting(cc_lightDirection[3], cc_lightColor[3]);\n      #elif CC_LIGHT_3_TYPE == 1\n        info3 = computePointLighting(s.position, cc_lightPositionAndRange[3], cc_lightColor[3]);\n      #elif CC_LIGHT_3_TYPE == 2\n        info3 = computeSpotLighting(s.position, cc_lightPositionAndRange[3], cc_lightDirection[3], cc_lightColor[3]);\n      #endif\n      Lighting result3 = brdf(s, info3);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 3\n    float shadow_3 = 1.0;\n    vec2 projCoords3 = v_posLightSpace[3].xy / v_posLightSpace[3].w;\n    vec2 shadowUV3 = projCoords3 * 0.5 + vec2(0.5);\n    if (shadowUV3.x >= 0.0 && shadowUV3.x <= 1.0 && shadowUV3.y >= 0.0 && shadowUV3.y <= 1.0) {\n      float currentDepth3 = clamp(v_depth[3], 0.0, 1.0);\n      #if CC_SHADOW_3_TYPE == 3\n        shadow_3 = shadowPCF3X3(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w, cc_shadow_info[3].z);\n      #elif CC_SHADOW_3_TYPE == 4\n        shadow_3 = shadowPCF5X5(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w, cc_shadow_info[3].z);\n      #else\n        shadow_3 = shadowSimple(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w);\n      #endif\n      shadow_3 = computeFallOff(shadow_3, projCoords3, 0.0);\n    }\n    result3.diffuse *= shadow_3;\n    result3.specular *= shadow_3;\n  #endif\n      result.diffuse += result3.diffuse;\n      result.specular += result3.specular;\n    #endif\n  #endif\n  return composePhongShading(result, s);\n}\nvoid surf (out PhongSurface s) {\n  vec4 diffuse = vec4(1, 1, 1, 1);\n  #if CC_USE_ATTRIBUTE_COLOR\n    diffuse *= v_color;\n  #endif\n  diffuse *= diffuseColor;\n  #if USE_DIFFUSE_TEXTURE\n  vec4 diffuseTexture_tmp = texture(diffuseTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_diffuseTexture\n      diffuseTexture_tmp.a *= texture(diffuseTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    diffuse.rgb *= (diffuseTexture_tmp.rgb * diffuseTexture_tmp.rgb);\n    diffuse.a *= diffuseTexture_tmp.a;\n  #else\n    diffuse *= diffuseTexture_tmp;\n  #endif\n  #endif\n  ALPHA_TEST(diffuse);\n  s.diffuse = diffuse.rgb;\n  s.opacity = diffuse.a;\n  #if USE_EMISSIVE\n    s.emissive = emissiveColor.rgb;\n    #if USE_EMISSIVE_TEXTURE\n  vec4 emissiveTexture_tmp = texture(emissiveTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_emissiveTexture\n      emissiveTexture_tmp.a *= texture(emissiveTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    s.emissive.rgb *= (emissiveTexture_tmp.rgb * emissiveTexture_tmp.rgb);\n  #else\n    s.emissive.rgb *= emissiveTexture_tmp.rgb;\n  #endif\n    #endif\n  #endif\n  #if USE_SPECULAR\n    s.specular = specularColor.rgb;\n    #if USE_SPECULAR_TEXTURE\n  vec4 specularTexture_tmp = texture(specularTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_specularTexture\n      specularTexture_tmp.a *= texture(specularTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    s.specular.rgb *= (specularTexture_tmp.rgb * specularTexture_tmp.rgb);\n  #else\n    s.specular.rgb *= specularTexture_tmp.rgb;\n  #endif\n    #endif\n  #endif\n  s.normal = v_worldNormal;\n  #if USE_NORMAL_TEXTURE\n    vec3 nmmp = texture(normalTexture, v_uv0).xyz - vec3(0.5);\n    s.normal =\n      nmmp.x * normalize(v_tangent) +\n      nmmp.y * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n    s.normal = normalize(s.normal);\n  #endif\n  s.position = v_worldPos;\n  s.viewDirection = v_viewDirection;\n  s.glossiness = glossiness;\n}\nvoid main () {\n  PhongSurface s;\n  surf(s);\n  vec4 color = CCPhongShading(s);\n  gl_FragColor = CCFragOutput(color);\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matWorld;\nuniform mat4 cc_matWorldIT;\nuniform mat4 cc_matViewProj;\nuniform vec4 cc_cameraPos;\n#if CC_USE_SKINNING\n  attribute vec4 a_weights;\n  attribute vec4 a_joints;\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform vec2 jointsTextureSize;\n    uniform sampler2D jointsTexture;\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = texture2D(jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture2D(jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture2D(jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture2D(jointsTexture, vec2(dx * (x + 3.5), y));\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture2D(jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform mat4 jointMatrices[50];\n    mat4 getBoneMatrix(const in float i) {\n      return jointMatrices[int(i)];\n    }\n  #endif\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\nstruct StandardVertInput {\n  vec2 uv;\n  vec4 position;\n  vec3 normal;\n  vec4 tangent;\n  vec4 color;\n};\nattribute vec3 a_position;\n#if CC_USE_ATTRIBUTE_UV0\nattribute vec2 a_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\nattribute vec4 a_color;\n#endif\n#if CC_USE_ATTRIBUTE_NORMAL\nattribute vec3 a_normal;\n#endif\n#if CC_USE_ATTRIBUTE_TANGENT\nattribute vec4 a_tangent;\n#endif\nvoid CCAttribute (out StandardVertInput In) {\n  In.position = vec4(a_position, 1.0);\n  #if CC_USE_ATTRIBUTE_UV0\n    In.uv = a_uv0;\n  #else\n    In.uv = vec2(0.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n    In.color = a_color;\n  #else\n    In.color = vec4(1.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_NORMAL\n    In.normal = a_normal;\n  #else\n    In.normal = vec3(0.0, 1.0, 0.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_TANGENT\n    In.tangent = a_tangent;\n  #else\n    In.tangent = vec4(1.0, 0.0, 0.0, 0.0);\n  #endif\n}\nvoid CCVertInput(out StandardVertInput In) {\n  CCAttribute(In);\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    In.position = m * In.position;\n    #if CC_USE_ATTRIBUTE_NORMAL\n      In.normal = (m * vec4(In.normal, 0)).xyz;\n    #endif\n    #if CC_USE_ATTRIBUTE_TANGENT\n      In.tangent = m * In.tangent;\n    #endif\n  #endif\n}\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  uniform mat4 cc_shadow_lightViewProjMatrix[2];\nuniform vec4 cc_shadow_info[2];\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\nvoid CCShadowInput (vec3 worldPos) {\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n    v_posLightSpace[i] = cc_shadow_lightViewProjMatrix[i] * vec4(worldPos, 1.0);\n    v_depth[i] = (v_posLightSpace[i].z + cc_shadow_info[i].x) / (cc_shadow_info[i].x + cc_shadow_info[i].y);\n  }\n  #endif\n}\nuniform vec2 mainTiling;\nuniform vec2 mainOffset;\n#if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE || USE_SPECULAR_TEXTURE || USE_NORMAL_TEXTURE)\n  varying mediump vec2 v_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if USE_NORMAL_TEXTURE\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\nvarying vec3 v_worldNormal;\nvarying vec3 v_worldPos;\nvarying vec3 v_viewDirection;\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  vec4 position = In.position;\n  v_worldNormal = normalize((cc_matWorldIT * vec4(In.normal, 0)).xyz);\n  v_worldPos = (cc_matWorld * position).xyz;\n  v_viewDirection = normalize(cc_cameraPos.xyz - v_worldPos);\n  #if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE || USE_SPECULAR_TEXTURE || USE_NORMAL_TEXTURE)\n    v_uv0 = In.uv * mainTiling + mainOffset;\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n    v_color = In.color;\n  #endif\n  #if USE_NORMAL_TEXTURE\n    v_tangent = normalize((cc_matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_worldNormal, v_tangent) * In.tangent.w;\n  #endif\n  CCShadowInput(v_worldPos);\n  gl_Position = cc_matViewProj * cc_matWorld * position;\n}","frag":"\nprecision highp float;\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform lowp vec4 diffuseColor;\nuniform lowp vec4 specularColor;\nuniform lowp vec4 emissiveColor;\nuniform float glossiness;\n#if USE_DIFFUSE_TEXTURE\n  uniform sampler2D diffuseTexture;\n#endif\n#if USE_SPECULAR && USE_SPECULAR_TEXTURE\n  uniform sampler2D specularTexture;\n#endif\n#if USE_EMISSIVE && USE_EMISSIVE_TEXTURE\n  uniform sampler2D emissiveTexture;\n#endif\n#if USE_NORMAL_TEXTURE\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalTexture;\n#endif\nvarying vec3 v_worldNormal;\nvarying vec3 v_worldPos;\nvarying vec3 v_viewDirection;\n#if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || (USE_EMISSIVE && USE_EMISSIVE_TEXTURE) || (USE_SPECULAR && USE_SPECULAR_TEXTURE) || USE_NORMAL_TEXTURE)\n  varying mediump vec2 v_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  uniform vec4 cc_shadow_info[2];\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\nfloat getDepth(sampler2D shadowMap, vec2 shadowUV) {\n    return unpackRGBAToDepth(texture2D(shadowMap, shadowUV));\n}\nfloat computeFallOff(float shadow, vec2 coords, float frustumEdgeFalloff) {\n  return shadow;\n}\nfloat shadowSimple(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness) {\n  float closestDepth = getDepth(shadowMap, shadowUV);\n  return currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n}\nfloat shadowPCF3X3(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness, float shadowSize) {\n  float shadow = 0.0;\n  for (int x = -1; x <= 1; ++x) {\n    for (int y = -1; y <= 1; ++y) {\n      float closestDepth = getDepth(shadowMap, shadowUV + vec2(x, y) * 1.0/shadowSize);\n      shadow += currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n    }\n  }\n  shadow /= 9.0;\n  return shadow;\n}\nfloat shadowPCF5X5(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness, float shadowSize) {\n  float shadow = 0.0;\n  for (int x = -2; x <= 2; ++x) {\n    for (int y = -2; y <= 2; ++y) {\n      float closestDepth = getDepth(shadowMap, shadowUV + vec2(x, y) * 1.0/shadowSize);\n      shadow += currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n    }\n  }\n  shadow /= 25.0;\n  return shadow;\n}\n#if CC_NUM_LIGHTS > 0\nuniform vec4 cc_lightPositionAndRange[4];\nuniform vec4 cc_lightDirection[4];\nuniform vec4 cc_lightColor[4];\n#endif\nstruct LightInfo {\n  vec3 lightDir;\n  vec3 radiance;\n  vec4 lightColor;\n};\nLightInfo computeDirectionalLighting(\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  ret.lightDir = -normalize(lightDirection.xyz);\n  ret.radiance = lightColor.rgb;\n  ret.lightColor = lightColor;\n  return ret;\n}\nLightInfo computePointLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  ret.lightDir = normalize(lightDir);\n  ret.radiance = lightColor.rgb * attenuation;\n  ret.lightColor = lightColor;\n  return ret;\n}\nLightInfo computeSpotLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  lightDir = normalize(lightDir);\n  float cosConeAngle = max(0., dot(lightDirection.xyz, -lightDir));\n  cosConeAngle = cosConeAngle < lightDirection.w ? 0. : cosConeAngle;\n  cosConeAngle = pow(cosConeAngle, lightColor.w);\n  ret.lightDir = lightDir;\n  ret.radiance = lightColor.rgb * attenuation * cosConeAngle;\n  ret.lightColor = lightColor;\n  return ret;\n}\nstruct Lighting {\n  vec3 diffuse;\n  vec3 specular;\n};\nstruct PhongSurface {\n  vec3 diffuse;\n  vec3 emissive;\n  vec3 specular;\n  float opacity;\n  float glossiness;\n  vec3 position;\n  vec3 normal;\n  vec3 viewDirection;\n};\nLighting brdf (PhongSurface s, LightInfo info) {\n  Lighting result;\n  float ndh = 0.0;\n  vec3 halfDir = normalize(s.viewDirection + info.lightDir);\n  float NdotH = max(0.0, dot(s.normal, halfDir));\n  NdotH = pow(NdotH, max(1.0, s.glossiness * 128.0));\n  result.diffuse = info.radiance * max(0.0, dot(s.normal, info.lightDir));\n  result.specular = info.radiance * NdotH;\n  return result;\n}\nvec4 composePhongShading (Lighting lighting, PhongSurface s) {\n  vec4 o = vec4(0.0, 0.0, 0.0, 1.0);\n  o.rgb = lighting.diffuse * s.diffuse;\n  #if USE_EMISSIVE\n    o.rgb += s.emissive;\n  #endif\n  #if USE_SPECULAR\n    o.rgb += lighting.specular * s.specular;\n  #endif\n  o.a = s.opacity;\n  return o;\n}\nvec3 ambient(PhongSurface s, vec4 ambientColor) {\n  return s.diffuse * ambientColor.rgb;\n}\nvec4 CCPhongShading (in PhongSurface s) {\n  Lighting result;\n  result.diffuse = vec3(0, 0, 0);\n  result.specular = vec3(0, 0, 0);\n  #if CC_NUM_LIGHTS > 0\n    #if CC_LIGHT_0_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[0]);\n    #else\n      LightInfo info0;\n      #if CC_LIGHT_0_TYPE == 0\n        info0 = computeDirectionalLighting(cc_lightDirection[0], cc_lightColor[0]);\n      #elif CC_LIGHT_0_TYPE == 1\n        info0 = computePointLighting(s.position, cc_lightPositionAndRange[0], cc_lightColor[0]);\n      #elif CC_LIGHT_0_TYPE == 2\n        info0 = computeSpotLighting(s.position, cc_lightPositionAndRange[0], cc_lightDirection[0], cc_lightColor[0]);\n      #endif\n      Lighting result0 = brdf(s, info0);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n    float shadow_0 = 1.0;\n    vec2 projCoords0 = v_posLightSpace[0].xy / v_posLightSpace[0].w;\n    vec2 shadowUV0 = projCoords0 * 0.5 + vec2(0.5);\n    if (shadowUV0.x >= 0.0 && shadowUV0.x <= 1.0 && shadowUV0.y >= 0.0 && shadowUV0.y <= 1.0) {\n      float currentDepth0 = clamp(v_depth[0], 0.0, 1.0);\n      #if CC_SHADOW_0_TYPE == 3\n        shadow_0 = shadowPCF3X3(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w, cc_shadow_info[0].z);\n      #elif CC_SHADOW_0_TYPE == 4\n        shadow_0 = shadowPCF5X5(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w, cc_shadow_info[0].z);\n      #else\n        shadow_0 = shadowSimple(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w);\n      #endif\n      shadow_0 = computeFallOff(shadow_0, projCoords0, 0.0);\n    }\n    result0.diffuse *= shadow_0;\n    result0.specular *= shadow_0;\n  #endif\n      result.diffuse += result0.diffuse;\n      result.specular += result0.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 1\n    #if CC_LIGHT_1_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[1]);\n    #else\n      LightInfo info1;\n      #if CC_LIGHT_1_TYPE == 0\n        info1 = computeDirectionalLighting(cc_lightDirection[1], cc_lightColor[1]);\n      #elif CC_LIGHT_1_TYPE == 1\n        info1 = computePointLighting(s.position, cc_lightPositionAndRange[1], cc_lightColor[1]);\n      #elif CC_LIGHT_1_TYPE == 2\n        info1 = computeSpotLighting(s.position, cc_lightPositionAndRange[1], cc_lightDirection[1], cc_lightColor[1]);\n      #endif\n      Lighting result1 = brdf(s, info1);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 1\n    float shadow_1 = 1.0;\n    vec2 projCoords1 = v_posLightSpace[1].xy / v_posLightSpace[1].w;\n    vec2 shadowUV1 = projCoords1 * 0.5 + vec2(0.5);\n    if (shadowUV1.x >= 0.0 && shadowUV1.x <= 1.0 && shadowUV1.y >= 0.0 && shadowUV1.y <= 1.0) {\n      float currentDepth1 = clamp(v_depth[1], 0.0, 1.0);\n      #if CC_SHADOW_1_TYPE == 3\n        shadow_1 = shadowPCF3X3(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w, cc_shadow_info[1].z);\n      #elif CC_SHADOW_1_TYPE == 4\n        shadow_1 = shadowPCF5X5(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w, cc_shadow_info[1].z);\n      #else\n        shadow_1 = shadowSimple(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w);\n      #endif\n      shadow_1 = computeFallOff(shadow_1, projCoords1, 0.0);\n    }\n    result1.diffuse *= shadow_1;\n    result1.specular *= shadow_1;\n  #endif\n      result.diffuse += result1.diffuse;\n      result.specular += result1.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 2\n    #if CC_LIGHT_2_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[2]);\n    #else\n      LightInfo info2;\n      #if CC_LIGHT_2_TYPE == 0\n        info2 = computeDirectionalLighting(cc_lightDirection[2], cc_lightColor[2]);\n      #elif CC_LIGHT_2_TYPE == 1\n        info2 = computePointLighting(s.position, cc_lightPositionAndRange[2], cc_lightColor[2]);\n      #elif CC_LIGHT_2_TYPE == 2\n        info2 = computeSpotLighting(s.position, cc_lightPositionAndRange[2], cc_lightDirection[2], cc_lightColor[2]);\n      #endif\n      Lighting result2 = brdf(s, info2);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 2\n    float shadow_2 = 1.0;\n    vec2 projCoords2 = v_posLightSpace[2].xy / v_posLightSpace[2].w;\n    vec2 shadowUV2 = projCoords2 * 0.5 + vec2(0.5);\n    if (shadowUV2.x >= 0.0 && shadowUV2.x <= 1.0 && shadowUV2.y >= 0.0 && shadowUV2.y <= 1.0) {\n      float currentDepth2 = clamp(v_depth[2], 0.0, 1.0);\n      #if CC_SHADOW_2_TYPE == 3\n        shadow_2 = shadowPCF3X3(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w, cc_shadow_info[2].z);\n      #elif CC_SHADOW_2_TYPE == 4\n        shadow_2 = shadowPCF5X5(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w, cc_shadow_info[2].z);\n      #else\n        shadow_2 = shadowSimple(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w);\n      #endif\n      shadow_2 = computeFallOff(shadow_2, projCoords2, 0.0);\n    }\n    result2.diffuse *= shadow_2;\n    result2.specular *= shadow_2;\n  #endif\n      result.diffuse += result2.diffuse;\n      result.specular += result2.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 3\n    #if CC_LIGHT_3_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[3]);\n    #else\n      LightInfo info3;\n      #if CC_LIGHT_3_TYPE == 0\n        info3 = computeDirectionalLighting(cc_lightDirection[3], cc_lightColor[3]);\n      #elif CC_LIGHT_3_TYPE == 1\n        info3 = computePointLighting(s.position, cc_lightPositionAndRange[3], cc_lightColor[3]);\n      #elif CC_LIGHT_3_TYPE == 2\n        info3 = computeSpotLighting(s.position, cc_lightPositionAndRange[3], cc_lightDirection[3], cc_lightColor[3]);\n      #endif\n      Lighting result3 = brdf(s, info3);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 3\n    float shadow_3 = 1.0;\n    vec2 projCoords3 = v_posLightSpace[3].xy / v_posLightSpace[3].w;\n    vec2 shadowUV3 = projCoords3 * 0.5 + vec2(0.5);\n    if (shadowUV3.x >= 0.0 && shadowUV3.x <= 1.0 && shadowUV3.y >= 0.0 && shadowUV3.y <= 1.0) {\n      float currentDepth3 = clamp(v_depth[3], 0.0, 1.0);\n      #if CC_SHADOW_3_TYPE == 3\n        shadow_3 = shadowPCF3X3(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w, cc_shadow_info[3].z);\n      #elif CC_SHADOW_3_TYPE == 4\n        shadow_3 = shadowPCF5X5(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w, cc_shadow_info[3].z);\n      #else\n        shadow_3 = shadowSimple(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w);\n      #endif\n      shadow_3 = computeFallOff(shadow_3, projCoords3, 0.0);\n    }\n    result3.diffuse *= shadow_3;\n    result3.specular *= shadow_3;\n  #endif\n      result.diffuse += result3.diffuse;\n      result.specular += result3.specular;\n    #endif\n  #endif\n  return composePhongShading(result, s);\n}\nvoid surf (out PhongSurface s) {\n  vec4 diffuse = vec4(1, 1, 1, 1);\n  #if CC_USE_ATTRIBUTE_COLOR\n    diffuse *= v_color;\n  #endif\n  diffuse *= diffuseColor;\n  #if USE_DIFFUSE_TEXTURE\n  vec4 diffuseTexture_tmp = texture2D(diffuseTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_diffuseTexture\n      diffuseTexture_tmp.a *= texture2D(diffuseTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    diffuse.rgb *= (diffuseTexture_tmp.rgb * diffuseTexture_tmp.rgb);\n    diffuse.a *= diffuseTexture_tmp.a;\n  #else\n    diffuse *= diffuseTexture_tmp;\n  #endif\n  #endif\n  ALPHA_TEST(diffuse);\n  s.diffuse = diffuse.rgb;\n  s.opacity = diffuse.a;\n  #if USE_EMISSIVE\n    s.emissive = emissiveColor.rgb;\n    #if USE_EMISSIVE_TEXTURE\n  vec4 emissiveTexture_tmp = texture2D(emissiveTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_emissiveTexture\n      emissiveTexture_tmp.a *= texture2D(emissiveTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    s.emissive.rgb *= (emissiveTexture_tmp.rgb * emissiveTexture_tmp.rgb);\n  #else\n    s.emissive.rgb *= emissiveTexture_tmp.rgb;\n  #endif\n    #endif\n  #endif\n  #if USE_SPECULAR\n    s.specular = specularColor.rgb;\n    #if USE_SPECULAR_TEXTURE\n  vec4 specularTexture_tmp = texture2D(specularTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_specularTexture\n      specularTexture_tmp.a *= texture2D(specularTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    s.specular.rgb *= (specularTexture_tmp.rgb * specularTexture_tmp.rgb);\n  #else\n    s.specular.rgb *= specularTexture_tmp.rgb;\n  #endif\n    #endif\n  #endif\n  s.normal = v_worldNormal;\n  #if USE_NORMAL_TEXTURE\n    vec3 nmmp = texture2D(normalTexture, v_uv0).xyz - vec3(0.5);\n    s.normal =\n      nmmp.x * normalize(v_tangent) +\n      nmmp.y * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n    s.normal = normalize(s.normal);\n  #endif\n  s.position = v_worldPos;\n  s.viewDirection = v_viewDirection;\n  s.glossiness = glossiness;\n}\nvoid main () {\n  PhongSurface s;\n  surf(s);\n  vec4 color = CCPhongShading(s);\n  gl_FragColor = CCFragOutput(color);\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CC_SHADOW","defines":["CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"]},{"name":"CCLIGHTS","defines":["CC_NUM_LIGHTS"]}],"samplers":[{"name":"cc_shadow_map_0","defines":["CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"]},{"name":"cc_shadow_map_1","defines":["CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"]}]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_JOINTS_TEXTRUE","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"CC_JOINTS_TEXTURE_FLOAT32","type":"boolean","defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"CC_USE_ATTRIBUTE_UV0","type":"boolean","defines":[]},{"name":"CC_USE_ATTRIBUTE_COLOR","type":"boolean","defines":[]},{"name":"CC_USE_ATTRIBUTE_NORMAL","type":"boolean","defines":[]},{"name":"CC_USE_ATTRIBUTE_TANGENT","type":"boolean","defines":[]},{"name":"CC_USE_SHADOW_MAP","type":"boolean","defines":[]},{"name":"CC_NUM_SHADOW_LIGHTS","type":"number","defines":["CC_USE_SHADOW_MAP"],"range":[0,3]},{"name":"USE_DIFFUSE_TEXTURE","type":"boolean","defines":[]},{"name":"USE_NORMAL_TEXTURE","type":"boolean","defines":[]},{"name":"OUTPUT_TO_GAMMA","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_SPECULAR","type":"boolean","defines":[]},{"name":"USE_SPECULAR_TEXTURE","type":"boolean","defines":["USE_SPECULAR"]},{"name":"USE_EMISSIVE","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_TEXTURE","type":"boolean","defines":["USE_EMISSIVE"]},{"name":"CC_NUM_LIGHTS","type":"number","defines":[],"range":[0,3]},{"name":"CC_LIGHT_0_TYPE","type":"number","defines":["CC_NUM_LIGHTS"],"range":[0,3]},{"name":"CC_SHADOW_0_TYPE","type":"number","defines":["CC_NUM_LIGHTS","CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"],"range":[0,3]},{"name":"CC_LIGHT_1_TYPE","type":"number","defines":["CC_NUM_LIGHTS"],"range":[0,3]},{"name":"CC_SHADOW_1_TYPE","type":"number","defines":["CC_NUM_LIGHTS","CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"],"range":[0,3]},{"name":"CC_LIGHT_2_TYPE","type":"number","defines":["CC_NUM_LIGHTS"],"range":[0,3]},{"name":"CC_SHADOW_2_TYPE","type":"number","defines":["CC_NUM_LIGHTS","CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"],"range":[0,3]},{"name":"CC_LIGHT_3_TYPE","type":"number","defines":["CC_NUM_LIGHTS"],"range":[0,3]},{"name":"CC_SHADOW_3_TYPE","type":"number","defines":["CC_NUM_LIGHTS","CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"],"range":[0,3]},{"name":"CC_USE_ALPHA_ATLAS_diffuseTexture","type":"boolean","defines":["USE_DIFFUSE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_DIFFUSE_TEXTURE"]},{"name":"CC_USE_ALPHA_ATLAS_emissiveTexture","type":"boolean","defines":["USE_EMISSIVE","USE_EMISSIVE_TEXTURE"]},{"name":"CC_USE_ALPHA_ATLAS_specularTexture","type":"boolean","defines":["USE_SPECULAR","USE_SPECULAR_TEXTURE"]}],"blocks":[{"name":"SKINNING","binding":0,"members":[{"name":"jointsTextureSize","type":14,"count":1}],"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"JOINT_MATRIX","binding":1,"members":[{"name":"jointMatrices","type":26,"count":50}],"defines":["CC_USE_SKINNING"]},{"name":"MAIN_TILING","binding":2,"members":[{"name":"mainTiling","type":14,"count":1},{"name":"mainOffset","type":14,"count":1}],"defines":[]},{"name":"ALPHA_TEST","binding":3,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"PhongFrag","binding":4,"members":[{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissiveColor","type":16,"count":1},{"name":"glossiness","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"jointsTexture","type":29,"count":1,"binding":30,"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"diffuseTexture","type":29,"count":1,"binding":31,"defines":["USE_DIFFUSE_TEXTURE"]},{"name":"specularTexture","type":29,"count":1,"binding":32,"defines":["USE_SPECULAR","USE_SPECULAR_TEXTURE"]},{"name":"emissiveTexture","type":29,"count":1,"binding":33,"defines":["USE_EMISSIVE","USE_EMISSIVE_TEXTURE"]},{"name":"normalTexture","type":29,"count":1,"binding":34,"defines":["USE_NORMAL_TEXTURE"]}]},{"hash":1165371292,"record":null,"name":"builtin-phong|shadow-map-vs|shadow-map-fs","glsl3":{"vert":"\nprecision highp float;\nin vec3 a_position;\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform CC_SHADOW_MAP {\n  mat4  cc_shadow_map_lightViewProjMatrix;\n  vec4  cc_shadow_map_info;\n  float cc_shadow_map_bias;\n};\nout float v_depth;\n#if CC_USE_SKINNING\n  in vec4 a_weights;\n  in vec4 a_joints;\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform SKINNING {\n      vec2 jointsTextureSize;\n    };\n    uniform sampler2D jointsTexture;\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = texture(jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture(jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture(jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture(jointsTexture, vec2(dx * (x + 3.5), y));\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture(jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform JOINT_MATRIX {\n      mat4 jointMatrices[50];\n    };\n    mat4 getBoneMatrix(const in float i) {\n      return jointMatrices[int(i)];\n    }\n  #endif\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\nvoid SKIN_VERTEX(inout vec4 a1) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n  #endif\n}\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n  #endif\n}\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n    a3 = m * a3;\n  #endif\n}\nvoid main () {\n  vec4 position = vec4(a_position, 1);\n  SKIN_VERTEX(position);\n  gl_Position = cc_shadow_map_lightViewProjMatrix * cc_matWorld * position;\n  v_depth = ((gl_Position.z + cc_shadow_map_info.x) / (cc_shadow_map_info.x + cc_shadow_map_info.y)) + cc_shadow_map_bias;\n}","frag":"\nprecision highp float;\nin float v_depth;\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nvoid main () {\n    gl_FragColor = packDepthToRGBA(v_depth);\n}"},"glsl1":{"vert":"\nprecision highp float;\nattribute vec3 a_position;\nuniform mat4 cc_matWorld;\nuniform mat4 cc_shadow_map_lightViewProjMatrix;\nuniform vec4 cc_shadow_map_info;\nuniform float cc_shadow_map_bias;\nvarying float v_depth;\n#if CC_USE_SKINNING\n  attribute vec4 a_weights;\n  attribute vec4 a_joints;\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform vec2 jointsTextureSize;\n    uniform sampler2D jointsTexture;\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = texture2D(jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture2D(jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture2D(jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture2D(jointsTexture, vec2(dx * (x + 3.5), y));\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture2D(jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform mat4 jointMatrices[50];\n    mat4 getBoneMatrix(const in float i) {\n      return jointMatrices[int(i)];\n    }\n  #endif\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\nvoid SKIN_VERTEX(inout vec4 a1) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n  #endif\n}\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n  #endif\n}\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n    a3 = m * a3;\n  #endif\n}\nvoid main () {\n  vec4 position = vec4(a_position, 1);\n  SKIN_VERTEX(position);\n  gl_Position = cc_shadow_map_lightViewProjMatrix * cc_matWorld * position;\n  v_depth = ((gl_Position.z + cc_shadow_map_info.x) / (cc_shadow_map_info.x + cc_shadow_map_info.y)) + cc_shadow_map_bias;\n}","frag":"\nprecision highp float;\nvarying float v_depth;\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nvoid main () {\n    gl_FragColor = packDepthToRGBA(v_depth);\n}"},"builtins":{"globals":{"blocks":[{"name":"CC_SHADOW_MAP","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_JOINTS_TEXTRUE","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"CC_JOINTS_TEXTURE_FLOAT32","type":"boolean","defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]}],"blocks":[{"name":"SKINNING","binding":0,"members":[{"name":"jointsTextureSize","type":14,"count":1}],"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"JOINT_MATRIX","binding":1,"members":[{"name":"jointMatrices","type":26,"count":50}],"defines":["CC_USE_SKINNING"]}],"samplers":[{"name":"jointsTexture","type":29,"count":1,"binding":30,"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]}]}],[{"passes":[{"name":"phong","program":"builtin-phong|phong-vs|phong-fs","rasterizerState":{"cullMode":1029},"depthStencilState":{"depthTest":true,"depthWrite":true},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"mainTiling":{"type":14,"value":[1,1]},"mainOffset":{"type":14,"value":[0,0]},"diffuseColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"diffuseTexture":{"value":"white","type":29},"specularColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"specularTexture":{"value":"white","type":29},"emissiveColor":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveTexture":{"value":"white","type":29},"glossiness":{"type":13,"value":[10]},"normalTexture":{"value":"white","type":29}}},{"name":"shadowcast","stage":"shadowcast","program":"builtin-phong|shadow-map-vs|shadow-map-fs","rasterizerState":{"cullMode":1029},"depthStencilState":{"depthTest":true,"depthWrite":true}}]}]]],0,0,[],[],[]],[[[6,"map",[{},"0",11,[{"defines":{"USE_DIFFUSE_TEXTURE":true,"USE_ALPHA_TEST":false}},"props",11,[{"glossiness":200},"emissiveColor",8,[4,4278190080],"diffuseColor",8,[4,4294139647],"diffuseTexture",6,0]]]]],0,0,[0,0],[5,3],[25,6]],[[{"name":"l","rect":[36,36,185,185],"offset":[0.5,-0.5],"originalSize":[256,256],"capInsets":[0,0,0,0]}],[4],0,[0],[8],[26]],[[[33,"UIMap"],[34,"UIMap",true,[-16,-17,-18,-19,-20,-21,-22],[[[50,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,56],-14,[51,45,-15]],4,1,4],[53,-1],[5,720,1280],[360,640,0,0,0,0,1,1,1,1]],[42,"3dMain",true,1,[-24,-25,-26,-27,-28,-29,-30,-31],[-23],[0,"1dnUh6G/hOlYM1sBSJ9zwV",1],[5,720,1280]],[24,"start_btn",false,1,[-36],[[27,1,0,-32,[43],44],[28,0.9,3,-34,-33],[26,9,5,5,-35]],[0,"68jAsK3ZZFEIJGOrSQVg+U",1],[5,150,80],[-280,595,0,0,0,0,1,1,1,0]],[24,"cutTo_btn",false,1,[-41],[[27,1,0,-37,[46],47],[28,0.9,3,-39,-38],[26,9,5,100,-40]],[0,"c2ARX4MMdPFoErwIOD44eg",1],[5,150,80],[-280,500,0,0,0,0,1,1,1,0]],[46,"BlurMask",1,[-45,-46,-47,-48],[[55,-44,-43,-42,35]],[0,"7eh2x9dDFDmJOSAzFNmpzu",1],[5,720,1280],[0,140,0,0,0,0,1,1,-1,1]],[12,"lamplight",true,1,1,[-49,-50,-51,-52],[0,"3aP76Mm4ZEupdKy9Nydr/N",1]],[23,"map",true,1,2,[-54],[0,"47zNYuu5lNbIER4gKFSPVG",-53],[0,0,0,0,0,0,1,18,18,18]],[23,"map_line",true,1,2,[-56],[0,"792R0k9t9AhbPNbB7Ak4qa",-55],[0,0,0,0,0,0,1,19,19,19]],[18,"map1",true,1,2,[-58],[0,"02XkYgbrJPaolMQCLEwtOJ",-57],[0,0,0,0,0.42261826174069944,0,0.9063077870366499,20,20,20],[1,0,50,0]],[18,"map2",true,1,2,[-60],[0,"adCHc64F1GJpWv6gX7gKVe",-59],[0,0,0,-0.45451947767204365,0.5416752204197018,0.5416752204197018,0.45451947767204376,19,19,19],[1,-90,100,0]],[47,"circle",true,1,[-62,-63],[[5,true,-61,[27],26]],[0,"81FVBtj4NIP7DB1ny/4iKN",1]],[13,"fine",true,1,[-65],[0,"9dziFmcedE55/Kk4DTm1mw",-64],[0,0,0,-0.6348471327716557,-0.23106545963812639,0.25216370040656594,0.6928140728731604,33,33,33],[1,-85,0,40]],[13,"thick",true,1,[-67],[0,"a5HN0uoNJObKBsrBo6Eu7n",-66],[-0.158,0.188,0.021,-0.6348471327716557,-0.23106545963812639,0.25216370040656594,0.6928140728731604,29,29,29],[1,-85,0,40]],[13,"fine",true,1,[-69],[0,"9dziFmcedE55/Kk4DTm1mw",-68],[0,0,0,-0.6122926660077799,0.2855167591915686,-0.31158686650350687,0.6682001915566583,33,33,33],[1,-85,0,-50]],[13,"thick",true,1,[-71],[0,"a5HN0uoNJObKBsrBo6Eu7n",-70],[-0.158,0.188,0.021,-0.6122926660077799,0.2855167591915686,-0.31158686650350687,0.6682001915566583,29,29,29],[1,-85,0,-50]],[35,"white",false,true,1,[-73],[0,"f0cF4hRRhDyJ6XfYkwZEbD",-72],[0,0,0,-0.43938504177070503,0.5265407845183632,0.3686878264946123,0.6275068715971331,35,35,35],[1,-70,80,0]],[14,"add",5,[-74],[0,"d4mtSRH1FPNalHScl5Mbmc",1]],[36,"spriteNode",5,[[-75,[52,false,45,720,1280,-76]],1,4],[0,"1dDPCar7pK7bQsC/P2VmsA",1],[5,720,1280]],[14,"light",17,[-77,-78,-79],[0,"feJu1r9uJClIc82JtrKZdV",1]],[37,"extra",1,[-80,-81],[0,"14QZz1P5JM2qtvG0nZf1rx",1],[0,140,0,0,0,0,1,1,1,1]],[56,-2,7,1024,false,3,false,[4,0]],[57,2,2,-20,1000,50],[2,"Sphere002",true,1,10,[[4,-82,[5],6],[5,true,-83,[8],7]],[0,"Sphere002",10]],[2,"stripList",true,1,2,[[63,-85,-84,9]],[0,"9f2PweIXFPdbB4gVje0vv/",1]],[12,"outer_line",true,1,2,[11,16],[0,"5cz9PUKqVO+4Rg/srfCCgG",1]],[12,"0",true,1,11,[12,13],[0,"feBg4QbrpAJa2vs4m34143",1]],[2,"Plane001",true,1,12,[[4,-86,[10],11],[5,true,-87,[13],12]],[0,"Plane001",12]],[2,"Plane001",true,1,13,[[4,-88,[14],15],[5,true,-89,[17],16]],[0,"Plane001",13]],[12,"1",true,1,11,[14,15],[0,"17BM2B4L1BV7UgdatWvyfv",1]],[2,"Plane001",true,1,14,[[4,-90,[18],19],[5,true,-91,[21],20]],[0,"Plane001",14]],[2,"Plane001",true,1,15,[[4,-92,[22],23],[5,true,-93,[25],24]],[0,"Plane001",15]],[2,"Plane001",true,1,16,[[4,-94,[28],29],[5,true,-95,[31],30]],[0,"Plane001",16]],[38,"dotNode",false,true,1,2,[-96],[0,"44xiuu6j5Fgrj+sLjpjGVJ",1]],[15,"0",true,1,33,[[62,[null],-97]],[0,"f8KgsM87pHRJ3s/bFjl1Xw",1],[0,4,0,-0.7071067811865475,0,0,0.7071067811865476,0.3,0.3,0.3],[1,-90,0,0]],[14,"light",20,[-98,-99],[0,"67xQqP3PlAE6SVP5vxNpuv",1]],[14,"lamplight",20,[-100,-101],[0,"56yK3GepNOjI8xDQIw/dDH",1]],[43,"3dCamera",true,1,1,[21],[0,"6exK47bxhLXa/S0V3XQU0h",1],[0,0,20,0,0,0,1,1,1,1]],[39,"DirectionalLight",false,true,1,6,[-102],[0,"aeeBP/f99I0b1KjuXS7IO6",1],[0,5,8,-0.2637518518924938,-0.2534607128149574,-0.2973226383716449,0.8819250968162419,1,1,1],[1,-42,-41,-23]],[2,"light",true,1,38,[[58,2,2,1000,-103]],[0,"65VwUYaJlHLYrlkfUof9w/",1]],[15,"AmbientLight",true,1,6,[[59,3,2,1000,-104]],[0,"e2Po+n3ypMW7D5wxC+2i9O",1],[0,5,8,-0.2637518518924938,-0.2534607128149574,-0.2973226383716449,0.8819250968162419,1,1,1],[1,-42,-41,-23]],[48,"PointLight",false,true,1,6,[[60,1,50,2,1000,-105,[4,3909025950]]],[0,"45d+QCMjVOM53oED3UmcdM",1],[0,0,21.987,0,0,0,1,1,1,1]],[44,"SpotLight",true,6,[22],[0,"ffjShjeb1F7JakoXA13Z9J",1],[0,0,15,0,0,0,1,1,1,1]],[18,"3dRotation",true,1,1,[2],[0,"ebEo+BfHhK2pJdSYNgsvm5",1],[0,0,0,0,0,0.17364817766693033,0.984807753012208,1,1,1],[1,0,0,20]],[45,"Sphere002",true,1,7,[-106],[0,"Sphere002",7],[0,0,0,-0.7071067811865475,0,0,0.7071067811865476,1,1,1],[1,-90,0,0]],[61,44,[0]],[15,"Sphere002",true,1,8,[[4,-107,[1],2]],[0,"Sphere002",8],[0,0,0,-0.7071067811865475,0,0,0.7071067811865476,1,1,1],[1,-90,0,0]],[15,"Sphere002",true,1,9,[[4,-108,[3],4]],[0,"Sphere002",9],[0,0,0,-0.7071067811865475,0,0,0.7071067811865476,1,1,1],[1,-90,0,0]],[40,"lineList",true,1,2,[0,"24bFHGvA5Hx7UOUclrL9xg",1]],[64,2,45,22,17],[54,1,18,[32]],[49,"light",false,5,[[3,1,-109,[33],34]],[0,"fcK3bMA2dHy6Kh37dRMYFd",1],[5,691,693],[0,5,16.788,0,0,0,1,0.77,0.77,0.77]],[41,"control",5,[0,"85l1VdiSFAqLx/EYt/sJsS",1],[5,720,770],[0,-20,1.329,0,0,0,1,1,1,1]],[19,"0",19,[[3,1,-110,[36],37]],[0,"c5uSwZothCZL1BvTelk9+L",1],[4,4283190527],[5,185,185],[-101,148,0,0,0,0,1,2.025,2.025,2.025]],[19,"1",19,[[3,1,-111,[38],39]],[0,"92iV/5T79G7K9obo0b9Qw1",1],[4,4294924108],[5,185,185],[-2,-214,0,0,0,0,1,2.025,2.025,2.025]],[16,"2",93,19,[[3,1,-112,[40],41]],[0,"5emG+BWkBCSr9nEoF0/Vq3",1],[4,4294917875],[5,185,185],[208,15,0,0,0,0,1,2.025,2.025,2.025]],[25,"text",3,[[29,"开场动画",30,32,1,1,-113,[42]]],[0,"e2x08KgPtKE7F8QEtFkjIY",1],[5,120,40.32],[0,5,0,0,0,0,1,1,1,1]],[25,"text",4,[[29,"转场",30,32,1,1,-114,[45]]],[0,"da4rTxJdhCGKW2eZ/OZFG6",1],[5,60,40.32],[0,5,0,0,0,0,1,1,1,1]],[16,"red",90,35,[[3,1,-115,[48],49]],[0,"685+aQjw1CdKNDlscePA5j",1],[4,4283190527],[5,185,185],[-33,440,0,0,0,0,1,4.1,4.1,2.025]],[16,"blue",90,35,[[3,1,-116,[50],51]],[0,"caClhKnwtBEKDAWwtvCtcH",1],[4,4294924108],[5,185,185],[-2,-407,0,0,0,0,1,2.025,2.025,2.025]],[19,"up",36,[[3,1,-117,[52],53]],[0,"7bRwO1jQ9E94vyvocSG5ej",1],[4,4294574335],[5,370,280],[-9,418,0,0,0,0,1,1.61,-1.7,1]],[16,"down",80,36,[[3,1,-118,[54],55]],[0,"8aATEWr91GKK6R/uZCBHUw",1],[4,4294574335],[5,370,280],[-9,-338,0,0,0,0,1,1,0.64,1]],[65,1,18,17,20,22]],0,[0,1,1,0,10,34,0,11,33,0,12,48,0,13,4,0,14,3,0,15,49,0,16,7,0,17,52,0,18,2,0,19,21,0,20,62,0,0,1,0,-2,62,0,0,1,0,-1,37,0,-2,6,0,-3,43,0,-4,3,0,-5,4,0,-6,5,0,-7,20,0,-1,49,0,-1,7,0,-2,8,0,-3,9,0,-4,10,0,-5,48,0,-6,24,0,-7,25,0,-8,33,0,0,3,0,9,3,0,0,3,0,0,3,0,-1,56,0,0,4,0,9,4,0,0,4,0,0,4,0,-1,57,0,21,50,0,22,21,0,0,5,0,-1,18,0,-2,51,0,-3,17,0,-4,52,0,-1,38,0,-2,40,0,-3,41,0,-4,42,0,1,7,0,-1,44,0,1,8,0,-1,46,0,1,9,0,-1,47,0,1,10,0,-1,23,0,0,11,0,-1,26,0,-2,29,0,1,12,0,-1,27,0,1,13,0,-1,28,0,1,14,0,-1,30,0,1,15,0,-1,31,0,1,16,0,-1,32,0,-1,19,0,-1,50,0,0,18,0,-1,53,0,-2,54,0,-3,55,0,-1,35,0,-2,36,0,0,23,0,0,23,0,23,24,0,0,24,0,0,27,0,0,27,0,0,28,0,0,28,0,0,30,0,0,30,0,0,31,0,0,31,0,0,32,0,0,32,0,-1,34,0,0,34,0,-1,58,0,-2,59,0,-1,60,0,-2,61,0,-1,39,0,0,39,0,0,40,0,0,41,0,-1,45,0,0,46,0,0,47,0,0,51,0,0,53,0,0,54,0,0,55,0,0,56,0,0,57,0,0,58,0,0,59,0,0,60,0,0,61,0,24,1,2,6,43,11,6,25,12,6,26,13,6,26,14,6,29,15,6,29,16,6,25,21,0,37,22,0,42,118],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45],[-1,-1,4,-1,4,-1,4,7,-1,25,-1,4,7,-1,-1,4,7,-1,-1,4,7,-1,-1,4,7,-1,7,-1,-1,4,7,-1,-1,-1,2,26,-1,2,-1,2,-1,2,-1,-1,2,-1,-1,2,-1,2,-1,2,-1,2,-1,2,27,4],[27,28,3,29,3,30,3,8,8,31,9,10,4,4,11,12,5,5,9,10,4,4,11,12,5,5,13,13,32,33,14,14,0,0,34,35,0,1,0,1,0,1,0,0,15,0,0,15,0,1,0,1,16,17,16,17,36,3]],[[[20,[{},"0",11,[{"defines":{"USE_DIFFUSE_TEXTURE":true,"USE_ALPHA_TEST":true}},"props",11,[{},"diffuseColor",8,[4,2520585215],"diffuseTexture",6,0]]]]],0,0,[0,0],[5,3],[37,2]]]]